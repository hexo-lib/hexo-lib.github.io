<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
<meta name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">

    <meta name="author" content="Tommas">


    <meta name="subtitle" content="Tommas Blog">


    <meta name="description" content="Keep quiet time for time">



<title>Lucene全文搜索解析 | Tommas&#39;s Blog</title>



    <link rel="icon" href="/images/favicon-32x32-next.png">




    <!-- stylesheets list from _config.yml -->
    
    <link rel="stylesheet" href="/css/style.css">
    



    <!-- scripts list from _config.yml -->
    
    <script src="/js/script.js"></script>
    
    <script src="/js/tocbot.min.js"></script>
    



    
    
        
    


<meta name="generator" content="Hexo 7.3.0"></head>

<body>
    <script src="/js/jquery-2.0.3.min.js"></script>
    
<script src="/js/search.js"></script>

    <script type="text/javascript">
        var search_path = "search.xml";
        if (search_path.length == 0) {
            search_path = "search.xml";
        }
        var path = "/" + search_path;
        searchFunc(path, 'local-search-input', 'local-search-result');
        click_time=0;
    </script>
    <script>
        // this function is used to check current theme before page loaded.
        (() => {
            const currentTheme = window.localStorage && window.localStorage.getItem('theme') || '';
            const isDark = currentTheme === 'dark';
            const pagebody = document.getElementsByTagName('body')[0]
            if (isDark) {
                pagebody.classList.add('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Dark"
            } else {
                pagebody.classList.remove('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Light"
            }
        })();
    </script>

    <div class="wrapper">
        <header>
    <nav class="navbar">
        <div class="container">
            <div class="navbar-header header-logo"><a href="/">Tommas&#39;s Blog</a></div>
            <div class="menu navbar-right">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" href="/index">Site</a>
                
                    <a class="menu-item" href="/links">Links</a>
                
                   <a class="menu-item" onclick="$('#search-page').show(); $('#local-search-input')[0].focus();">Search</a>
                <input id="switch_default" type="checkbox" class="switch_default">
                <label for="switch_default" class="toggleBtn"></label>
            </div>
        </div>
    </nav>

    
    <nav class="navbar-mobile" id="nav-mobile">
        <div class="container">
            <div class="navbar-header">
                <div>
                    <a href="/">Tommas&#39;s Blog</a><a id="mobile-toggle-theme">·&nbsp;Light</a>
                </div>
                <div class="menu-toggle" onclick="mobileBtn()">&#9776; Menu</div>
            </div>
            <div class="menu" id="mobile-menu">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" href="/index">Site</a>
                
                    <a class="menu-item" href="/links">Links</a>
                
            </div>
        </div>
    </nav>

</header>
<script>
    var mobileBtn = function f() {
        var toggleMenu = document.getElementsByClassName("menu-toggle")[0];
        var mobileMenu = document.getElementById("mobile-menu");
        if(toggleMenu.classList.contains("active")){
           toggleMenu.classList.remove("active")
            mobileMenu.classList.remove("active")
        }else{
            toggleMenu.classList.add("active")
            mobileMenu.classList.add("active")
        }
    }
</script>

            <div class="main">
        <div style="z-index: 1000; position: fixed; background-color: rgba(0, 0, 0, 0.8);
        top: 0; bottom: 0; left: 0; right: 0; padding: 0 max(50% - 375px,5px); display: none;" id="search-page"
        onclick="if (Date.now()-click_time>=10) { this.style.display='none'; } quitting=1; ">
    <input id="local-search-input" style="height: 24px; position: relative; top: 24px; font-size: 16px;
        width: calc(100% - 50px); color: white; background-color: initial; padding: 12px 23px; border-radius: 5px; border: 2px solid #bbb; outline: 0;"
        onclick="click_time=Date.now()">
    <div id="local-search-result" style="width: 100%; position: relative; top: 24px;
        height: calc(100% - 105px);" onclick="click_time=Date.now()"></div>
</div>

                <div class="container">
    
    

    
    <article class="post-wrap">
        <header class="post-header">
            <h1 class="post-title">Lucene全文搜索解析</h1>
            
                <div class="post-meta">
                    
                        Author: <a itemprop="author" rel="author" href="/">Tommas</a>
                    

                    
                        <span class="post-time">
                        Date: <a href="#">November 30, 2017&nbsp;&nbsp;13:34:36</a>
                        </span>
                    
                    
                        <span class="post-category">
                    Category:
                            
                                <a href="/categories/Lucene/">Lucene</a>
                            
                        </span>
                    
                </div>
            
        </header>

        <div class="post-content">
            <p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0052.jpg" alt="image"></p>
<p>一、创建查询对象的方式<br>对要搜索的信息创建Query查询对象，Lucene会根据Query查询对象生成最终的查询语法。类似关系数据库Sql语法一样，Lucene也有自己的查询语法，比如：“name:lucene”表示查询Field的name为“lucene”的文档信息。</p>
<span id="more"></span>
<p>可通过两种方法创建查询对象：</p>
<p>使用Lucene提供Query子类<br>Query是一个抽象类，lucene提供了很多查询对象，比如TermQuery项精确查询，NumericRangeQuery数字范围查询等。</p>
<p>如下代码：</p>
<p>Query query &#x3D; new TermQuery(new Term(“name”, “lucene”));<br>使用QueryParse解析查询表达式<br>QueryParser会将用户输入的查询表达式解析成Query对象实例。<br>如下代码：</p>
<p>QueryParser queryParser &#x3D; new QueryParser(“name”, new IKAnalyzer());<br>Query query &#x3D; queryParser.parse(“name:lucene”);<br>二、通过Query子类搜索<br>2.1 TermQuery<br>TermQuery项查询，TermQuery不使用分析器，搜索关键词作为整体来匹配Field域中的词进行查询，比如订单号、分类ID号等。</p>
<p>private void doSearch(Query query) {</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IndexReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// a) 指定索引库目录</span></span><br><span class="line">    <span class="type">Directory</span> <span class="variable">indexdirectory</span> <span class="operator">=</span> FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(</span><br><span class="line">            <span class="string">&quot;E:\\11-index\\0720&quot;</span>));</span><br><span class="line">    <span class="comment">// b) 创建IndexReader对象</span></span><br><span class="line">    reader = DirectoryReader.open(indexdirectory);</span><br><span class="line">    <span class="comment">// c) 创建IndexSearcher对象</span></span><br><span class="line">    <span class="type">IndexSearcher</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexSearcher</span>(reader);</span><br><span class="line">    <span class="comment">// d) 通过IndexSearcher对象执行查询索引库，返回TopDocs对象</span></span><br><span class="line">    <span class="comment">// 第一个参数：查询对象</span></span><br><span class="line">    <span class="comment">// 第二个参数：最大的n条记录</span></span><br><span class="line">    <span class="type">TopDocs</span> <span class="variable">topDocs</span> <span class="operator">=</span> searcher.search(query, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// e) 提取TopDocs对象中的文档ID，如何找出对应的文档</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">    System.out.println(<span class="string">&quot;总共查询出的结果总数为：&quot;</span> + topDocs.totalHits);</span><br><span class="line">    Document doc;</span><br><span class="line">    <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">        <span class="comment">// 文档对象ID</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">docId</span> <span class="operator">=</span> scoreDoc.doc;</span><br><span class="line">        doc = searcher.doc(docId);</span><br><span class="line">        <span class="comment">// f) 输出文档内容</span></span><br><span class="line">        System.out.println(doc.get(<span class="string">&quot;filename&quot;</span>));</span><br><span class="line">        System.out.println(doc.get(<span class="string">&quot;path&quot;</span>));</span><br><span class="line">        System.out.println(doc.get(<span class="string">&quot;size&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>}</p>
<p>@Test<br>public void testTermQuery() throws Exception {</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、 创建查询（Query对象）</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TermQuery</span>(<span class="keyword">new</span> <span class="title class_">Term</span>(<span class="string">&quot;filename&quot;</span>, <span class="string">&quot;apache&quot;</span>));</span><br><span class="line"><span class="comment">// 2、 执行搜索</span></span><br><span class="line">doSearch(query);</span><br></pre></td></tr></table></figure>
<p>}<br>2.2 NumericRangeQuery<br>NumericRangeQuery，指定数字范围查询.</p>
<p>@Test<br>public void testNumbericRangeQuery() throws Exception {</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建查询</span></span><br><span class="line"><span class="comment">// 第一个参数：域名</span></span><br><span class="line"><span class="comment">// 第二个参数：最小值</span></span><br><span class="line"><span class="comment">// 第三个参数：最大值</span></span><br><span class="line"><span class="comment">// 第四个参数：是否包含最小值</span></span><br><span class="line"><span class="comment">// 第五个参数：是否包含最大值</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> NumericRangeQuery.newLongRange(<span class="string">&quot;size&quot;</span>, <span class="number">1l</span>, <span class="number">100l</span>, <span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 2、 执行搜索</span></span><br><span class="line">doSearch(query);</span><br></pre></td></tr></table></figure>
<p>}<br>2.3 BooleanQuery<br>BooleanQuery，布尔查询，实现组合条件查询。</p>
<p>@Test<br>public void booleanQuery() throws Exception {</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BooleanQuery</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BooleanQuery</span>();</span><br><span class="line"><span class="type">Query</span> <span class="variable">query1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TermQuery</span>(<span class="keyword">new</span> <span class="title class_">Term</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;3&quot;</span>));</span><br><span class="line"><span class="type">Query</span> <span class="variable">query2</span> <span class="operator">=</span> NumericRangeQuery.newFloatRange(<span class="string">&quot;price&quot;</span>, <span class="number">10f</span>, <span class="number">200f</span>,</span><br><span class="line">        <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//MUST：查询条件必须满足，相当于AND</span></span><br><span class="line"><span class="comment">//SHOULD:查询条件可选，相当于OR</span></span><br><span class="line"><span class="comment">//MUST_NOT：查询条件不能满足，相当于NOT非</span></span><br><span class="line">query.add(query1, Occur.MUST);</span><br><span class="line">query.add(query2, Occur.SHOULD);</span><br><span class="line"></span><br><span class="line">System.out.println(query);</span><br><span class="line"></span><br><span class="line">search(query);</span><br></pre></td></tr></table></figure>
<p>}<br>组合关系代表的意思如下:</p>
<p>1、MUST和MUST表示“与”的关系，即“交集”。<br>2、MUST和MUST_NOT前者包含后者不包含。<br>3、MUST_NOT和MUST_NOT没意义<br>4、SHOULD与MUST表示MUST，SHOULD失去意义；<br>5、SHOUlD与MUST_NOT相当于MUST与MUST_NOT。<br>6、SHOULD与SHOULD表示“或”的概念。<br>三、通过QueryParser搜索<br>通过QueryParser也可以创建Query，QueryParser提供一个Parse方法，此方法可以直接根据查询语法来查询。Query对象执行的查询语法可通过System.out.println(query);查询。</p>
<p>3.1 QueryParser<br>代码实现：</p>
<p>@Test<br>public void testQueryParser() throws Exception {</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建QueryParser</span></span><br><span class="line"><span class="comment">// 第一个参数：默认域名</span></span><br><span class="line"><span class="comment">// 第二个参数：分词器</span></span><br><span class="line"><span class="type">QueryParser</span> <span class="variable">queryParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryParser</span>(<span class="string">&quot;name&quot;</span>, <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>());</span><br><span class="line"><span class="comment">// 指定查询语法 ，如果不指定域，就搜索默认的域</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> queryParser.parse(<span class="string">&quot;lucene&quot;</span>);</span><br><span class="line">System.out.println(query);</span><br><span class="line"><span class="comment">// 2、 执行搜索</span></span><br><span class="line">doSearch(query);</span><br></pre></td></tr></table></figure>
<p>}<br>查询语法：</p>
<p>1、基础的查询语法，关键词查询：</p>
<p>域名+“：”+搜索的关键字<br>例如：content:java<br>2、范围查询</p>
<p>域名+“:”+[最小值 TO 最大值]<br>例如：size:[1 TO 1000]<br>注意：QueryParser不支持对数字范围的搜索，它支持字符串范围。<br>数字范围搜索建议使用NumericRangeQuery。<br>3、组合条件查询</p>
<p>组合条件查询.PNG<br>1）+条件1 +条件2：两个条件之间是并且的关系and<br>例如：+filename:apache +content:apache</p>
<p>2）+条件1 条件2：必须满足第一个条件，忽略第二个条件<br>例如：+filename:apache content:apache</p>
<p>3）条件1 条件2：两个条件满足其一即可。<br>例如：filename:apache content:apache</p>
<p>4）-条件1 条件2：必须不满足条件1，要满足条件2<br>例如：-filename:apache content:apache</p>
<p>第二种写法：<br>条件1 AND 条件2<br>条件1 OR 条件2<br>条件1 NOT 条件2<br>3.2 MultiFieldQueryParser<br>通过MultiFieldQueryParser对多个域查询。</p>
<p>@Test<br>public void testMultiFieldQueryParser() throws Exception {</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以指定默认搜索的域是多个</span></span><br><span class="line">String[] fields = &#123; <span class="string">&quot;name&quot;</span>, <span class="string">&quot;description&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 创建一个MulitFiledQueryParser对象</span></span><br><span class="line"><span class="type">QueryParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiFieldQueryParser</span>(fields, <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>());</span><br><span class="line"><span class="comment">// 指定查询语法 ，如果不指定域，就搜索默认的域</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> parser.parse(<span class="string">&quot;lucene&quot;</span>);</span><br><span class="line"><span class="comment">//等同于name:lucene OR description:lucene</span></span><br><span class="line"><span class="comment">// Query query = parser.parse(&quot;name:lucene OR description:lucene&quot;);</span></span><br><span class="line"><span class="comment">// 2、 执行搜索</span></span><br><span class="line">doSearch(query);</span><br></pre></td></tr></table></figure>
<p>}<br>四、TopDocs<br>Lucene搜索结果可通过TopDocs遍历，TopDocs类提供了少量的属性，如下：</p>
<p>topdocs属性.PNG<br>注意：</p>
<p>Search方法需要指定匹配记录数量n：indexSearcher.search(query, n)<br>TopDocs.totalHits：是匹配索引库中所有记录的数量<br>TopDocs.scoreDocs：匹配相关度高的前边记录数组，scoreDocs的长度小于等于search方法指定的参数n</p>

        </div>

        
            <section class="post-copyright">
                
                    <p class="copyright-item">
                        <span>Author:</span>
                        <span>Tommas</span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>Permalink:</span>
                        <span><a href="https://m.is-local.org/post/2017111334.htm">https://m.is-local.org/post/2017111334.htm</a></span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>License:</span>
                        <span>© 2024 <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by-nc/4.0/">CC-BY-NC-4.0</a> LICENSE</span>
                    </p>
                
                

            </section>
        
        <section class="post-tags">
            <div>
                <span>Tag(s):</span>
                <span class="tag">
                    
                    
                        <a href="/tags/Lucene/">🏷️ Lucene</a>
                    
                        
                </span>
            </div>
            <div>
                <a href="javascript:window.history.back();">back</a>
                <span>· </span>
                <a href="/">home</a>
            </div>
        </section>
        <section class="post-nav">
            
                <a class="prev" rel="prev" href="/post/2017111430.htm">Lucene的Field域和索引维护</a>
            
            
            <a class="next" rel="next" href="/post/2017111234.htm">Lucene实现文档进行全文检索功能</a>
            
        </section>


    </article>
</div>

            </div>
            <footer id="footer" class="footer">
    <div class="copyright">
      <span>© 2024 Tommas</span> 
    </div>
</footer>

    </div>
</body>

</html>
