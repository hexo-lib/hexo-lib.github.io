<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
<meta name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">

    <meta name="author" content="Tommas">


    <meta name="subtitle" content="Tommas Blog">


    <meta name="description" content="Keep quiet time for time">



<title>JQuery中的DOM操作 | Tommas&#39;s Blog</title>



    <link rel="icon" href="/favicon.ico">




    <!-- stylesheets list from _config.yml -->
    
    <link rel="stylesheet" href="/css/style.css">
    



    <!-- scripts list from _config.yml -->
    
    <script src="/js/script.js"></script>
    
    <script src="/js/tocbot.min.js"></script>
    



    
    
        
    


<meta name="generator" content="Hexo 7.2.0"></head>

<body>
    <script>
        // this function is used to check current theme before page loaded.
        (() => {
            const currentTheme = window.localStorage && window.localStorage.getItem('theme') || '';
            const isDark = currentTheme === 'dark';
            const pagebody = document.getElementsByTagName('body')[0]
            if (isDark) {
                pagebody.classList.add('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Dark"
            } else {
                pagebody.classList.remove('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Light"
            }
        })();
    </script>

    <div class="wrapper">
        <header>
    <nav class="navbar">
        <div class="container">
            <div class="navbar-header header-logo"><a href="/">Tommas&#39;s Blog</a></div>
            <div class="menu navbar-right">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" target="_blank" rel="noopener" href="https://mc.is-local.org/">Nest</a>
                
                <input id="switch_default" type="checkbox" class="switch_default">
                <label for="switch_default" class="toggleBtn"></label>
            </div>
        </div>
    </nav>

    
    <nav class="navbar-mobile" id="nav-mobile">
        <div class="container">
            <div class="navbar-header">
                <div>
                    <a href="/">Tommas&#39;s Blog</a><a id="mobile-toggle-theme">·&nbsp;Light</a>
                </div>
                <div class="menu-toggle" onclick="mobileBtn()">&#9776; Menu</div>
            </div>
            <div class="menu" id="mobile-menu">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" target="_blank" rel="noopener" href="https://mc.is-local.org/">Nest</a>
                
            </div>
        </div>
    </nav>

</header>
<script>
    var mobileBtn = function f() {
        var toggleMenu = document.getElementsByClassName("menu-toggle")[0];
        var mobileMenu = document.getElementById("mobile-menu");
        if(toggleMenu.classList.contains("active")){
           toggleMenu.classList.remove("active")
            mobileMenu.classList.remove("active")
        }else{
            toggleMenu.classList.add("active")
            mobileMenu.classList.add("active")
        }
    }
</script>
            <div class="main">
                <div class="container">
    
    
        <div class="post-toc">
    <div class="tocbot-list">
    </div>
    <div class="tocbot-list-menu">
        <a class="tocbot-toc-expand" onclick="expand_toc()">Expand all</a>
        <a onclick="go_top()">Back to top</a>
        <a onclick="go_bottom()">Go to bottom</a>
    </div>
</div>

<script>
    var tocbot_timer;
    var DEPTH_MAX = 6; // 为 6 时展开所有
    var tocbot_default_config = {
        tocSelector: '.tocbot-list',
        contentSelector: '.post-content',
        headingSelector: 'h1, h2, h3, h4, h5',
        orderedList: false,
        scrollSmooth: true,
        onClick: extend_click,
    };

    function extend_click() {
        clearTimeout(tocbot_timer);
        tocbot_timer = setTimeout(function() {
            tocbot.refresh(obj_merge(tocbot_default_config, {
                hasInnerContainers: true
            }));
        }, 420); // 这个值是由 tocbot 源码里定义的 scrollSmoothDuration 得来的
    }

    document.ready(function() {
        tocbot.init(obj_merge(tocbot_default_config, {
            collapseDepth: 1
        }));
    });

    function expand_toc() {
        var b = document.querySelector('.tocbot-toc-expand');
        var expanded = b.getAttribute('data-expanded');
        expanded ? b.removeAttribute('data-expanded') : b.setAttribute('data-expanded', true);
        tocbot.refresh(obj_merge(tocbot_default_config, {
            collapseDepth: expanded ? 1 : DEPTH_MAX
        }));
        b.innerText = expanded ? 'Expand all' : 'Collapse all';
    }

    function go_top() {
        window.scrollTo(0, 0);
    }

    function go_bottom() {
        window.scrollTo(0, document.body.scrollHeight);
    }

    function obj_merge(target, source) {
        for (var item in source) {
            if (source.hasOwnProperty(item)) {
                target[item] = source[item];
            }
        }
        return target;
    }
</script>
    

    
    <article class="post-wrap">
        <header class="post-header">
            <h1 class="post-title">JQuery中的DOM操作</h1>
            
                <div class="post-meta">
                    
                        Author: <a itemprop="author" rel="author" href="/">Tommas</a>
                    

                    
                        <span class="post-time">
                        Date: <a href="#">January 23, 2018&nbsp;&nbsp;22:44:36</a>
                        </span>
                    
                    
                        <span class="post-category">
                    Category:
                            
                                <a href="/categories/JQuery/">JQuery</a>
                            
                        </span>
                    
                </div>
            
        </header>

        <div class="post-content">
            <p><img src="https://s2.loli.net/2023/04/16/fhdIXZuDiRG8cg7.png"></p>
<p>　JQuery中的DOM操作主要对包括：建【新建】、增【添加】、删【删除】、改【修改】、查【查找】【像数据库操作】。下面的DOM操作将围绕上面的DOM树进行学习JQueryDOM操作。</p>
<span id="more"></span>

<h3 id="一、查–查找DOM节点"><a href="#一、查–查找DOM节点" class="headerlink" title="一、查–查找DOM节点"></a>一、查–查找DOM节点</h3><p>查找节点非常容易，使用选择器就能轻松完成各种查找工作。</p>
<p>例：查找元素节点p返回p内的文本内容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">text</span>();</span><br></pre></td></tr></table></figure>

<p>例：查找元素节点p的属性返回属性名称对应的属性值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;title&quot;</span>)<span class="comment">//返回p的属性title的值。</span></span><br></pre></td></tr></table></figure>

<h4 id="1、jQuery选择器：-‘-text’"><a href="#1、jQuery选择器：-‘-text’" class="headerlink" title="1、jQuery选择器：$(‘#text’)"></a>1、jQuery选择器：$(‘#text’)</h4><p>最基本的选择器，简化了js的getElementById\byClassNames，querySelectorAll()等方法。允许使用css选择器来对DOM元素进行选择。</p>
<h4 id="2、子元素"><a href="#2、子元素" class="headerlink" title="2、子元素"></a>2、子元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(“.<span class="property">parent</span>”).<span class="title function_">children</span>();<span class="comment">//所有子元素的集合1</span></span><br></pre></td></tr></table></figure>

<h4 id="3、parent-、parents-、closest"><a href="#3、parent-、parents-、closest" class="headerlink" title="3、parent()、parents()、closest()"></a>3、parent()、parents()、closest()</h4><p>parent()用于查找一级父元素，parents()查找所有父元素的集合，closest()查找最近的父元素<br>例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">“a”</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span> test = $(“#a”);</span><br><span class="line">test.<span class="title function_">parent</span>();<span class="comment">//ul</span></span><br><span class="line">test.<span class="title function_">parents</span>();<span class="comment">//ul,div..一直到html</span></span><br><span class="line">test.<span class="title function_">closest</span>(“div”)<span class="comment">//div12345678910</span></span><br></pre></td></tr></table></figure>

<h4 id="4、find"><a href="#4、find" class="headerlink" title="4、find()"></a>4、find()</h4><p>同js的[某元素].getElementById()，在某元素里面找元素</p>
<h4 id="5、nextAll-、prevAll"><a href="#5、nextAll-、prevAll" class="headerlink" title="5、nextAll()、prevAll()"></a>5、nextAll()、prevAll()</h4><p>Ps:javaScript的对应方法 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">firstChild</span>(),lastChild,<span class="title function_">parent</span>()….</span><br></pre></td></tr></table></figure>

<h3 id="二、建–新建DOM节点"><a href="#二、建–新建DOM节点" class="headerlink" title="二、建–新建DOM节点"></a>二、建–新建DOM节点</h3><h4 id="1、创建元素节点"><a href="#1、创建元素节点" class="headerlink" title="1、创建元素节点"></a>1、创建元素节点</h4><p>创建元素节点并且把节点作为<ul>元素的子节点添加到DOM节点树上。先创建元素点，创建元素节点使用Jquery的工厂函数$()来完成，格式如下：$(html),该方法会根据传入的html字符串返回一个DOM对象，并将DOM对象包装成一个JQuery对象后返回。创建一个元素节点JQuery代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$li1=$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>代码返回$li1就是一个由DOM对象包装成的JQuery对象。把新建节点添加到DOM树中JQuery代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>($li1); </span><br></pre></td></tr></table></figure>

<p>添加后页面中只能看到<li>元素默认的”·”,由于没有为节点添加文本所以只显示默认符号，下面创建文本节点。<br>PS:append()方法是添加DOM节点方法详见增–添加DOM节点。 </p>
<h4 id="2、创建文本节点"><a href="#2、创建文本节点" class="headerlink" title="2、创建文本节点"></a>2、创建文本节点</h4><p>使用JQuery的工厂函数$()同样能够创建文本节点，创建文本节点的JQuery代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$li2=$(<span class="string">&quot;&lt;li&gt;苹果&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>代码返回$li2就是一个由DOM对象包装成JQuery对象，把新建的文本节点添加到DOM树中JQuery代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>($li2);</span><br></pre></td></tr></table></figure>

<p>添加后页面中能看到”·苹果”，右键查看页面源码发现新加的文本节点没有title属性。下面方法创建带属性的节点。</p>
<h4 id="3、创建属性节点"><a href="#3、创建属性节点" class="headerlink" title="3、创建属性节点"></a>3、创建属性节点</h4><p>创建属性节点同元素节点、文本节点一样使用JQuery的工厂函数完成。创建属性节点的JQuery代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$li3=$(<span class="string">&quot;&lt;li title=&#x27;榴莲&#x27;&gt;榴莲&lt;/li&gt;&quot;</span>);　</span><br></pre></td></tr></table></figure>

<p>代码返回$li3也是一个由DOM对象包装成JQuery对象，把新建的属性节点添加到DOM树中JQuery代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>($li3);</span><br></pre></td></tr></table></figure>

<p>添加后页面中能看到”·榴莲”，右键查看页面源码发现新加的属性节点有title&#x3D;’榴莲’属性。</p>
<h3 id="三、增–添加DOM节点"><a href="#三、增–添加DOM节点" class="headerlink" title="三、增–添加DOM节点"></a>三、增–添加DOM节点</h3><p>动态新建元素不添加到文档中没有实际意义，将新建的节点插入到文档中有多个方法，如下：<code>append()、appendTo()、prepend()、prependTo()、after()、insertAfter()、before()、insertBefore()。</code></p>
<h4 id="1、append-方法"><a href="#1、append-方法" class="headerlink" title="1、append()方法"></a>1、append()方法</h4><p>append()方法向匹配的元素内部追加内容，方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;target&quot;</span>).<span class="title function_">append</span>(element);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;li title=&#x27;香蕉&#x27;&gt;香蕉&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>该方法查找ul元素，然后向ul中添加新建的li元素。</p>
<h4 id="2、appendTo-方法"><a href="#2、appendTo-方法" class="headerlink" title="2、appendTo()方法"></a>2、appendTo()方法</h4><p>appendTo()方法将所有匹配的元素追加到指定的元素中，该方法是append()方法的颠倒[操作主题的颠倒并非操作结果]操作。方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">appendTo</span>(target);</span><br></pre></td></tr></table></figure>

<p>例： </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;li title=&#x27;荔枝&#x27;&gt;荔枝&lt;li&gt;&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;ul&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>该方法新建元素li，然后把li添加到查找到的ul元素中。</p>
<h4 id="3、prepend-方法"><a href="#3、prepend-方法" class="headerlink" title="3、prepend()方法"></a>3、prepend()方法</h4><p>prepend()方法将每匹配的元素内部前置要添加的元素，方法如下：$(target).prepend(element);例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;&lt;li title=&#x27;芒果&#x27;&gt;芒果&lt;/li&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>该方法将查找元素ul然后将新建的li元素作为ul子节点，且作为ul的第一个子节点插入到ul中。</p>
<h4 id="4、prependTo-方法"><a href="#4、prependTo-方法" class="headerlink" title="4、prependTo()方法"></a>4、prependTo()方法</h4><p>　prependTo()方法将元素添加到每一个匹配的元素内部前置，方法如下：$(element).prependTo();例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;li title=&#x27;西瓜’&gt;西瓜&lt;/li&gt;&quot;</span>).<span class="title function_">prependTo</span>(<span class="string">&quot;ul&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>该方法将新建的元素li插入到查找到的ul元素中作为ul的第一个子节元素。</p>
<h4 id="5、after-方法"><a href="#5、after-方法" class="headerlink" title="5、after()方法"></a>5、after()方法</h4><p>after()方法向匹配的元素后面添加元素，新添加的元素做为目标元素后的紧邻的兄弟元素。方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(target).<span class="title function_">after</span>(element);</span><br></pre></td></tr></table></figure>

<p>例:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">after</span>(<span class="string">&quot;&lt;span&gt;新加段新加段新加段新加段新加段&lt;/span&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>方法将查找节点p，然后把新建的元素添加到span节点后面做为p的兄弟节点。</p>
<h4 id="6、insertAfter-方法"><a href="#6、insertAfter-方法" class="headerlink" title="6、insertAfter()方法"></a>6、insertAfter()方法</h4><p>insertAfter()方法将新建的元素插入到查找到的目标元素后，做为目标元素的兄弟节点。方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">insertAfter</span>(target);</span><br></pre></td></tr></table></figure>

<p>例:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;p&gt;insertAfter操作&lt;/p&gt;&quot;</span>).<span class="title function_">insertAfter</span>(<span class="string">&quot;span&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>方法将新建的p元素添加到查找到目标元素span后面，做为目标元素后面的第一个兄弟节点。</p>
<h4 id="7、before-方法"><a href="#7、before-方法" class="headerlink" title="7、before()方法"></a>7、before()方法</h4><p>before()方法在每一个匹配的元素之前插入，做为匹配元素的前一个兄弟节点。方法如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(target).<span class="title function_">before</span>(element);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">before</span>(<span class="string">&quot;&lt;span&gt;下面是个段落&lt;/span&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>before方法查找每个元素p，将新建的span元素插入到元素p之前做为p的前一个兄弟节点。</p>
<h4 id="8、insertBefore-方法"><a href="#8、insertBefore-方法" class="headerlink" title="8、insertBefore()方法"></a>8、insertBefore()方法</h4><p>insertBefore()方法将新建元素添加到目标元素前，做为目标元素的前一个兄弟节点，方法如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">insertBefore</span>(target);</span><br></pre></td></tr></table></figure>

<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;a href=&#x27;#&#x27;&gt;锚&lt;/a&gt;&quot;</span>).<span class="title function_">insertBefore</span>(<span class="string">&quot;ul&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>insertBefore()新建a元素，将新建的a元素添加到元素ul前，做为ul的前一个兄弟节点。</p>
<p>增加元素的方法前四个是添加到元素内部，后四个是添加到元素外部的操作，有这些方法可以完成任何形式的元素添加。</p>
<h3 id="四、删–删除DOM节点操作"><a href="#四、删–删除DOM节点操作" class="headerlink" title="四、删–删除DOM节点操作"></a>四、删–删除DOM节点操作</h3><p>如果想要删除文档中的某个元素JQuery提供了两种删除节点的方法：remove()和empty();</p>
<h4 id="1、remove-方法"><a href="#1、remove-方法" class="headerlink" title="1、remove()方法"></a>1、remove()方法</h4><p>remove()方法删除所有匹配的元素，传入的参数用于筛选元素，该方法能删除元素中的所有子节点，当匹配的节点及后代被删除后，该方法返回值是指向被删除节点的引用，因此可以使用该引用，再使用这些被删除的元素。方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure>

<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">span=(<span class="string">&quot;span&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">$span.<span class="title function_">insertAfter</span>(<span class="string">&quot;ul&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>该示例中先删除所有的span元素，把删除后的元素使用$span接收，把删除后的元素添加到ul后面做为ul的兄弟节点。该操作相当于将所有的span元素以及后代元素移到ul后面。</p>
<h4 id="2、empty-方法。"><a href="#2、empty-方法。" class="headerlink" title="2、empty()方法。"></a>2、empty()方法。</h4><p>empty()方法严格来讲并不是删除元素，该方法只是清空节点，它能清空元素中的所有子节点。方法如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">empty</span>();</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul li:eq(0)&quot;</span>).<span class="title function_">empty</span>();</span><br></pre></td></tr></table></figure>

<p>该示例使用empty方法清空ul中第一个li的文本值。只能下li标签默认符号”·“。</p>
<h3 id="五、改–修改DOM节点操作"><a href="#五、改–修改DOM节点操作" class="headerlink" title="五、改–修改DOM节点操作"></a>五、改–修改DOM节点操作</h3><p>　修改文档中的元素节点可以使用多种方法:复制节点、替换节点、包裹节点。</p>
<h4 id="1、复制节点-element-clone"><a href="#1、复制节点-element-clone" class="headerlink" title="1、复制节点$(element).clone()"></a>1、复制节点$(element).clone()</h4><p>　复制节点方法能够复制节点元素，并且能够根据参数决定是否复制节点元素的行为。方法如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">clone</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul li:eq(0)&quot;</span>).<span class="title function_">clone</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>　该方法复制ul的第一个li元素，true参数决定复制元素时也复制元素行为，当不复制行为时没有参数。</p>
<h4 id="2、替换节点-element-repalcewith-、-element-repalceAll"><a href="#2、替换节点-element-repalcewith-、-element-repalceAll" class="headerlink" title="2、替换节点$(element).repalcewith()、$(element).repalceAll()"></a>2、替换节点$(element).repalcewith()、$(element).repalceAll()</h4><p>　替换节点方法能够替换某个节点，有两种形式形式实现：replaceWith()和replaceAll().使用replaceWith方法使用后面的元素替换前面的元素，replaceAll方法使用前面的元素替换后面的元素，方法如下：$(oldelement).replaceWith(newelement);$(newelement).repalceAll(oldelement);例：　$(“p”).replaceWith(“<strong>我要留下</strong>“);该方法使用strong元素替换p元素。</p>
<p>　　$(“<h3>替换strong</h3>“).repalceAll(“strong”);该例使用h3元素替换所有的strong元素。</p>
<h4 id="3、包裹节点-element-wrap-、-element-wrapAll-、-element-wrapInner"><a href="#3、包裹节点-element-wrap-、-element-wrapAll-、-element-wrapInner" class="headerlink" title="3、包裹节点$(element).wrap()、$(element).wrapAll()、$(element).wrapInner()"></a>3、包裹节点$(element).wrap()、$(element).wrapAll()、$(element).wrapInner()</h4><p>　包裹节点方法使用其他标记包裹目标元素从而改变元素的显示形式等，并且该操作不会破坏原始文档的词义。包裹节点有三种实现形式：wrap();wrapAll();wrapInner();</p>
<p>　wrap()方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(dstelement).<span class="title function_">wrap</span>(tag);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　$(<span class="string">&quot;p&quot;</span>).<span class="title function_">wrap</span>(<span class="string">&quot;&lt;b&gt;&lt;/b&gt;&quot;</span>);<span class="comment">//该示例方法使用b标签包裹所有的p元素每个元素都使用b标签包裹。</span></span><br></pre></td></tr></table></figure>

<p>　wrapAll()方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(dstelement).<span class="title function_">wrapAll</span>(tag);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　$(<span class="string">&quot;p&quot;</span>).<span class="title function_">wrapAll</span>(<span class="string">&quot;&lt;b&gt;&lt;/b&gt;&quot;</span>);<span class="comment">//访示例方法使用b标签包裹所有的p元素，所有的p元素标签用一个b标签包裹。</span></span><br></pre></td></tr></table></figure>

<p>　　wrapInner()方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(dstelement).<span class="title function_">wrapInner</span>(tag);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　$(<span class="string">&quot;strong&quot;</span>).<span class="title function_">wrapInner</span>(<span class="string">&quot;&lt;b&gt;&lt;/b&gt;&quot;</span>);<span class="comment">//该示例使用b标签包裹每个一strong元素的子元素。</span></span><br></pre></td></tr></table></figure>

<p>Dom元素的其他操作:属性操作、样式操作、设置和获取HTML,文本和值、遍历节点操作、Css-Dom操作。</p>
<h4 id="1、属性操作attr-和removeAttr"><a href="#1、属性操作attr-和removeAttr" class="headerlink" title="1、属性操作attr()和removeAttr()"></a>1、属性操作attr()和removeAttr()</h4><p>attr()方法能够获取元素属性，也能能够设置元素属性。方法如下，当attr(para1)方法有个参数时候用于获得当前元素的para1的属性值，当attr(para1,attrValue)有两个参数时候设置当前元素的属性名为para1的属性值为attrValue;例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;title&quot;</span>);<span class="comment">//该示例用于获得p元素的title属性值。</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;//你最喜欢的水果&quot;</span>);该示例设置p元素的title属性值为<span class="string">&quot;你最喜欢的水果&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>如果一次设置多个属性值可以使用“名&#x2F;值”对形式，例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">attr</span>(&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;你最喜欢的水果&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;水果&quot;</span>&#125;)<span class="comment">//。该示例一次设置两个属性值。</span></span><br></pre></td></tr></table></figure>

<p>removeAttr()方法用于删除特定的属性，方法是在参数中指定属性名。例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">removeAttr</span>(<span class="string">&quot;name&quot;</span>);<span class="comment">//该方法就是移除p元素的name属性。</span></span><br></pre></td></tr></table></figure>

<h4 id="2、样式操作addClass-、removeClass-、toggleClass-和hasClass"><a href="#2、样式操作addClass-、removeClass-、toggleClass-和hasClass" class="headerlink" title="2、样式操作addClass()、removeClass()、toggleClass()和hasClass()"></a>2、样式操作addClass()、removeClass()、toggleClass()和hasClass()</h4><p>添加样式addClass()方法，使用该方法对目标元素添加相应的样式，方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">addClass</span>();</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;ul&quot;</span>);<span class="comment">//该示例设置元素p的样式为ul。</span></span><br></pre></td></tr></table></figure>

<p>移除样式removeClass()方法，使用该方法移除目标元素的指定样式，方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">removeClass</span>();</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;ul&quot;</span>);<span class="comment">//该救命去除掉p元素的ul类样式。</span></span><br></pre></td></tr></table></figure>

<p>切换样式toggleClass()方法，使用该方法切换目标元素的样式，方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(element).<span class="title function_">toggleClass</span>();</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;ul&quot;</span>);<span class="comment">//该方法来回切换【添加删除实现切换】元素p的样式ul.</span></span><br></pre></td></tr></table></figure>

<p>判断元素是否使用了样式 $(element).hasClass(),方法如下：$(element).hasClass(class);例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>($(<span class="string">&quot;p&quot;</span>).<span class="title function_">hasClass</span>(<span class="string">&quot;ul&quot;</span>));<span class="comment">//打印出p元素是否有ul样式。</span></span><br></pre></td></tr></table></figure>

<p>PS:addClass()和attr()方法设置样式的不同，attr方法把元素的属性名对应的属性值设为方法中的参数值，addClass()则把属性值</p>
<p>添加到属性名对应的属性值中。例：已有元素<p class='class1'>元素样式</p>,使用attr()和addClass()分别添加新样式。</p>
<h4 id="3、设置和获取HTML【html-】-文本【text-】和值【val-】"><a href="#3、设置和获取HTML【html-】-文本【text-】和值【val-】" class="headerlink" title="3、设置和获取HTML【html()】,文本【text()】和值【val()】"></a>3、设置和获取HTML【html()】,文本【text()】和值【val()】</h4><p>html()方法获得或设置某个元素的html元素。方法如下:$(selector).html();例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">&quot;p&quot;</span>).<span class="title function_">html</span>();该示例获得元素p的html内容。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;strong&gt;添加html内容&lt;/strong&gt;&quot;</span>);该示例设置p的html内容为”&lt;strong&gt;添加html内容&lt;/strong&gt;“;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">PS</span>：该方法可以用于<span class="variable constant_">XHTML</span>文档，不能用于<span class="variable constant_">XML</span>文档。</span><br><span class="line"></span><br><span class="line"><span class="title function_">text</span>()方法获得或设置某个元素的文本值。方法如下:$(selecotr).<span class="title function_">text</span>();例：</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">text</span>();该示例获得元素p的text文本内容。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;重新设置的文本内容&quot;</span>);该示例设置元素p的text文本为<span class="string">&quot;重新设置的文本内容&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">PS</span>:该方法对html和<span class="variable constant_">XML</span>文档都适用。</span><br><span class="line"></span><br><span class="line"><span class="title function_">val</span>()方法获得或设置某个元素的值，如果元素值是多选则以数组形式返回，方法如下：$(selector).<span class="title function_">val</span>();例:文本元素 </span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userName&quot;</span> value=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span><br><span class="line">$(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>();获得input元素的值。</span><br><span class="line">$(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>(<span class="string">&#x27;响马&#x27;</span>);设置input元素的值为<span class="string">&#x27;响马&#x27;</span>。</span><br><span class="line"><span class="title function_">val</span>()方法的不仅能操作input，最重要的一个用途用于select【下拉列表框】、checkbox【多选框】、radio【单选框】。例：在下拉框下的多选赋值应用&lt;select id=<span class="string">&quot;fruits&quot;</span> multiple=<span class="string">&quot;multiple&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>&lt;/select&gt;</span><br><span class="line">$(<span class="string">&quot;#fruits&quot;</span>).<span class="title function_">val</span>([<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;香蕉&#x27;</span>]);该示例使select中苹果和香蕉两项被选中。</span><br></pre></td></tr></table></figure>

<h4 id="4、遍历节点操作children-、next-、prev-、siblings-和closest"><a href="#4、遍历节点操作children-、next-、prev-、siblings-和closest" class="headerlink" title="4、遍历节点操作children()、next()、prev()、siblings()和closest()"></a>4、遍历节点操作children()、next()、prev()、siblings()和closest()</h4><p>children()方法用于取得匹配元素的子元素集合，只匹配子元素不考虑任何后代元素。方法如下：$(selector).children();例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　(<span class="string">&quot;(&quot;</span>body<span class="string">&quot;).children().length;//该示例获得body元素的子元素个数；</span></span><br></pre></td></tr></table></figure>

<p>next()方法用于匹配元素的下一个兄弟节点，方法如下:$(selector).next();例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　$(<span class="string">&quot;p&quot;</span>).<span class="title function_">next</span>().<span class="title function_">html</span>();<span class="comment">//该示例获得p元素的下一个兄弟节点的html内容。</span></span><br></pre></td></tr></table></figure>

<p>prev()方法用于匹配元素的上一个兄弟节点，方法如下：$(selector).prev();例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prev</span>().<span class="title function_">text</span>();<span class="comment">//该示例获得ul元素的上一个兄弟节点的文本内容。</span></span><br></pre></td></tr></table></figure>

<p>siblings方法()用于匹配目标元素的所有兄弟元素，方法如下：$(selector).siblings();例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">slibings</span>();<span class="comment">//示例获得p元素的所有兄弟节点元素。</span></span><br></pre></td></tr></table></figure>

<p>closest()方法()用来取得最近的匹配元素，首先检查当前元素是否匹配如果匹配则直接返回，否则继续向上查找父元素中符合条件的元素返回，如果没有匹配的元素则返回空JQuery对象。</p>
<h4 id="5、CSS-Dom操作css-、offset-、position-、scrollTop-和scrollLeft"><a href="#5、CSS-Dom操作css-、offset-、position-、scrollTop-和scrollLeft" class="headerlink" title="5、CSS-Dom操作css()、offset()、position()、scrollTop()和scrollLeft()"></a>5、CSS-Dom操作css()、offset()、position()、scrollTop()和scrollLeft()</h4><p>css()方法用于获取、设置元素的一个或多个属性。方法如下：$(selector).css();例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);<span class="comment">//该示例用于设置元素的颜色属性为红色;</span></span><br><span class="line">   $(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>)<span class="comment">//该示例用于获得元素的color样式值;</span></span><br><span class="line">　$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;30px&quot;</span>,<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;#888888&quot;</span>&#125;);<span class="comment">//该示例用于设置元素的多个样式。</span></span><br></pre></td></tr></table></figure>

<p>offset()方法用于获取元素相对当前窗体的偏移量，其返回对象包括两个属性：top和left。方法如下：$(selector).offset()</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　<span class="keyword">var</span> offset= $(<span class="string">&quot;p&quot;</span>).<span class="title function_">offset</span>(); <span class="keyword">var</span> left=offset.<span class="property">left</span>;<span class="keyword">var</span> top=offset.<span class="property">top</span>;<span class="comment">//该示例用于获得元素p的偏移量。</span></span><br></pre></td></tr></table></figure>

<p>PS:offset()只对可见元素有效。</p>
<p>position()方法用于获取元素于最近的个position样式属性设置为relative或者absolute的祖交节点的相对偏移量。方法如下：$(selector).position();例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　<span class="keyword">var</span> postion = $(<span class="string">&quot;p&quot;</span>).<span class="title function_">positon</span>();<span class="keyword">var</span> left=positon.<span class="property">left</span>;<span class="keyword">var</span> top=positon.<span class="property">top</span>;<span class="comment">//该示例用于获得元素p的位置。</span></span><br></pre></td></tr></table></figure>

<p>scrollTop()和scrollLeft()方法用于获取元素的滚动条距顶端的距离和距左侧的距离。方法如下:(selector).scrollTop();(selector).scrollLeft();例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollTop=(<span class="string">&quot;p&quot;</span>).<span class="title function_">scrollTop</span>();<span class="keyword">var</span> scrollLeft=(<span class="string">&quot;p&quot;</span>).<span class="title function_">scrollLeft</span>();<span class="comment">//该示例用于获得元素的滚动条的位置。</span></span><br></pre></td></tr></table></figure>

<p>也可以添加参数将元素滚动到指定的位置。例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　(<span class="string">&quot;textarea&quot;</span>).<span class="title function_">scrollTop</span>(<span class="number">300</span>);(<span class="string">&quot;textarea&quot;</span>).<span class="title function_">scrollLeft</span>(<span class="number">300</span>);</span><br></pre></td></tr></table></figure>


        </div>

        
            <section class="post-copyright">
                
                    <p class="copyright-item">
                        <span>Author:</span>
                        <span>Tommas</span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>Permalink:</span>
                        <span><a href="https://hexo-theme.github.io/post/2018012244.htm">https://hexo-theme.github.io/post/2018012244.htm</a></span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>License:</span>
                        <span>Copyright (c) 2024 <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by-nc/4.0/">CC-BY-NC-4.0</a> LICENSE</span>
                    </p>
                
                
                     <p class="copyright-item">
                         <span>Slogan:</span>
                         <span>Do you believe in <strong>DESTINY</strong>?</span>
                     </p>
                

            </section>
        
        <section class="post-tags">
            <div>
                <span>Tag(s):</span>
                <span class="tag">
                    
                    
                        <a href="/tags/JQuery/"># JQuery</a>
                    
                        
                </span>
            </div>
            <div>
                <a href="javascript:window.history.back();">back</a>
                <span>· </span>
                <a href="/">home</a>
            </div>
        </section>
        <section class="post-nav">
            
                <a class="prev" rel="prev" href="/post/2018021544.htm">技术变化那么快，如何做到不被淘汰</a>
            
            
            <a class="next" rel="next" href="/post/2018012334.htm">我36岁了，除了收费啥都不会</a>
            
        </section>


    </article>
</div>

            </div>
            <footer id="footer" class="footer">
    <div class="copyright">
        <span>© Tommas | Powered by <a href="https://hexo.io" target="_blank">Hexo</a> & <a href="https://github.com/Siricee/hexo-theme-Chic" target="_blank">Chic</a></span>
    </div>
</footer>

    </div>
</body>

</html>