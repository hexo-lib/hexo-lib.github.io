<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
<meta name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">

    <meta name="author" content="Tommas">


    <meta name="subtitle" content="Tommas Blog">


    <meta name="description" content="Keep quiet time for time">



<title>设计模式（Design pattern）导学 | Tommas&#39;s Blog</title>



    <link rel="icon" href="/images/favicon-32x32-next.png">




    <!-- stylesheets list from _config.yml -->
    
    <link rel="stylesheet" href="/css/style.css">
    



    <!-- scripts list from _config.yml -->
    
    <script src="/js/script.js"></script>
    
    <script src="/js/tocbot.min.js"></script>
    



    
    
        
    


<meta name="generator" content="Hexo 7.3.0"></head>

<body>
    <script src="/js/jquery-2.0.3.min.js"></script>
    
<script src="/js/search.js"></script>

    <script type="text/javascript">
        var search_path = "search.xml";
        if (search_path.length == 0) {
            search_path = "search.xml";
        }
        var path = "/" + search_path;
        searchFunc(path, 'local-search-input', 'local-search-result');
        click_time=0;
    </script>
    <script>
        // this function is used to check current theme before page loaded.
        (() => {
            const currentTheme = window.localStorage && window.localStorage.getItem('theme') || '';
            const isDark = currentTheme === 'dark';
            const pagebody = document.getElementsByTagName('body')[0]
            if (isDark) {
                pagebody.classList.add('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Dark"
            } else {
                pagebody.classList.remove('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Light"
            }
        })();
    </script>

    <div class="wrapper">
        <header>
    <nav class="navbar">
        <div class="container">
            <div class="navbar-header header-logo"><a href="/">Tommas&#39;s Blog</a></div>
            <div class="menu navbar-right">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" href="/index">Site</a>
                
                    <a class="menu-item" href="/links">Links</a>
                
                   <a class="menu-item" onclick="$('#search-page').show(); $('#local-search-input')[0].focus();">Search</a>
                <input id="switch_default" type="checkbox" class="switch_default">
                <label for="switch_default" class="toggleBtn"></label>
            </div>
        </div>
    </nav>

    
    <nav class="navbar-mobile" id="nav-mobile">
        <div class="container">
            <div class="navbar-header">
                <div>
                    <a href="/">Tommas&#39;s Blog</a><a id="mobile-toggle-theme">·&nbsp;Light</a>
                </div>
                <div class="menu-toggle" onclick="mobileBtn()">&#9776; Menu</div>
            </div>
            <div class="menu" id="mobile-menu">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" href="/index">Site</a>
                
                    <a class="menu-item" href="/links">Links</a>
                
            </div>
        </div>
    </nav>

</header>
<script>
    var mobileBtn = function f() {
        var toggleMenu = document.getElementsByClassName("menu-toggle")[0];
        var mobileMenu = document.getElementById("mobile-menu");
        if(toggleMenu.classList.contains("active")){
           toggleMenu.classList.remove("active")
            mobileMenu.classList.remove("active")
        }else{
            toggleMenu.classList.add("active")
            mobileMenu.classList.add("active")
        }
    }
</script>

            <div class="main">
        <div style="z-index: 1000; position: fixed; background-color: rgba(0, 0, 0, 0.8);
        top: 0; bottom: 0; left: 0; right: 0; padding: 0 max(50% - 375px,5px); display: none;" id="search-page"
        onclick="if (Date.now()-click_time>=10) { this.style.display='none'; } quitting=1; ">
    <input id="local-search-input" style="height: 24px; position: relative; top: 24px; font-size: 16px;
        width: calc(100% - 50px); color: white; background-color: initial; padding: 12px 23px; border-radius: 5px; border: 2px solid #bbb; outline: 0;"
        onclick="click_time=Date.now()">
    <div id="local-search-result" style="width: 100%; position: relative; top: 24px;
        height: calc(100% - 105px);" onclick="click_time=Date.now()"></div>
</div>

                <div class="container">
    
    

    
    <article class="post-wrap">
        <header class="post-header">
            <h1 class="post-title">设计模式（Design pattern）导学</h1>
            
                <div class="post-meta">
                    
                        Author: <a itemprop="author" rel="author" href="/">Tommas</a>
                    

                    
                        <span class="post-time">
                        Date: <a href="#">February 7, 2018&nbsp;&nbsp;22:44:36</a>
                        </span>
                    
                    
                        <span class="post-category">
                    Category:
                            
                                <a href="/categories/Java/">Java</a>
                            
                        </span>
                    
                </div>
            
        </header>

        <div class="post-content">
            <p><img src="https://s2.loli.net/2023/04/16/XDgYZ2RMLxIl7Vd.jpg"></p>
<p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<span id="more"></span>
<ul>
<li><p><strong>基础知识</strong></p>
<p><strong>设计模式概述</strong></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7417668">从招式与内功谈起——设计模式概述（一）</a>：设计模式从何而来？</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420863">从招式与内功谈起——设计模式概述（二）</a>：设计模式是什么？</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420866">从招式与内功谈起——设计模式概述（三）</a>：设计模式有什么用？附：个人观点</p>
<p><strong>面向对象设计原则</strong></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7536532">面向对象设计原则概述</a></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7536542">面向对象设计原则之单一职责原则</a></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7537584">面向对象设计原则之开闭原则</a></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7540445">面向对象设计原则之里氏代换原则</a></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7562783">面向对象设计原则之依赖倒转原则</a></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7562842">面向对象设计原则之接口隔离原则</a></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7563441">面向对象设计原则之合成复用原则</a></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7563445">面向对象设计原则之迪米特法则</a></p>
<p><strong>六个创建型模式</strong></p>
<p>简单工厂模式-Simple Factory Pattern【学习难度：★★☆☆☆，使用频率：★★★☆☆】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9300337">工厂三兄弟之简单工厂模式（一）</a>：图表库的设计</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9300549">工厂三兄弟之简单工厂模式（二）</a>：简单工厂模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9300657">工厂三兄弟之简单工厂模式（三）</a>：图表库的简单工厂模式解决方案</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9300731">工厂三兄弟之简单工厂模式（四）</a>：图表库解决方案的改进，简单工厂模式的简化，简单工厂模式总结</p>
<p>工厂方法模式-Factory Method Pattern【学习难度：★★☆☆☆，使用频率：★★★★★】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9306457">工厂三兄弟之工厂方法模式（一）</a>：日志记录器的设计</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9306745">工厂三兄弟之工厂方法模式（二）</a>：工厂方法模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9307137">工厂三兄弟之工厂方法模式（三）</a>：日志记录器的工厂方法模式解决方案，反射与配置文件</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9307561">工厂三兄弟之工厂方法模式（四）</a>：重载的工厂方法，工厂方法的隐藏，工厂方法模式总结</p>
<p>抽象工厂模式-Abstract  Factory Pattern【学习难度：★★★★☆，使用频率：★★★★★】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9319181">工厂三兄弟之抽象工厂模式（一）</a>：界面皮肤库的初始设计</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9319323">工厂三兄弟之抽象工厂模式（二）</a>：产品等级结构与产品族</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9319423">工厂三兄弟之抽象工厂模式（三）</a>：抽象工厂模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9319481">工厂三兄弟之抽象工厂模式（四）</a>：界面皮肤库的抽象工厂模式解决方案</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9319571">工厂三兄弟之抽象工厂模式（五）</a>：“开闭原则”的倾斜性，抽象工厂模式总结</p>
<p>单例模式-Singleton Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420883">确保对象的唯一性——单例模式 （一）</a>：单例模式的动机，单例模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420885">确保对象的唯一性——单例模式 （二）</a>：负载均衡器的设计与实现</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420886">确保对象的唯一性——单例模式 （三）</a>：饿汉式单例与懒汉式单例的讨论</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420888">确保对象的唯一性——单例模式 （四）</a>：一种更好的单例实现方法（静态内部类）</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420889">确保对象的唯一性——单例模式 （五）</a>：单例模式总结</p>
<p>原型模式-Prototype Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7424559">对象的克隆——原型模式（一）</a>：大同小异的工作周报，原型模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7424594">对象的克隆——原型模式（二）</a>：工作周报的原型模式解决方案</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7424620">对象的克隆——原型模式（三）</a>：带附件的周报【浅克隆，深克隆】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7424623">对象的克隆——原型模式（四）</a>：原型管理器的引入和实现，原型模式总结</p>
<p>建造者模式-Builder Pattern【学习难度：★★★★☆，使用频率：★★☆☆☆】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7426015">复杂对象的组装与创建——建造者模式（一）</a>：游戏角色设计，建造者模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7426323">复杂对象的组装与创建——建造者模式（二）</a>：游戏角色设计的建造者模式解决方案</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7426855">复杂对象的组装与创建——建造者模式（三）</a>：关于Director的进一步讨论，建造者模式总结</p>
<p><strong>七个结构型模式</strong></p>
<p>适配器模式-Adapter Pattern【学习难度：★★☆☆☆，使用频率：★★★★☆】</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8624325">不兼容结构的协调——适配器模式（一）</a>：没有源码的算法库，适配器模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8624412">不兼容结构的协调——适配器模式（二）</a>：没有源码的算法库的适配器模式解决方案</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8624428">不兼容结构的协调——适配器模式（三）</a>：类适配器，双向适配器</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8624633">不兼容结构的协调——适配器模式（四）</a>：缺省适配器，适配器模式总结</p>
<p><strong>桥接模式-Bridge Pattern【学习难度：</strong>★★★☆☆<strong>，使用频率：<strong><strong>★★★☆☆</strong></strong>】</strong></p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7464183">处理多维度变化——桥接模式（一）</a>：跨平台图像浏览系统</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7464195">处理多维度变化——桥接模式（二）</a>：桥接模式概述</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7464204">处理多维度变化——桥接模式（三）</a>：跨平台图像浏览系统的桥接模式解决方案</p>
<p><a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7464208">处理多维度变化——桥接模式（四）</a>：适配器模式与桥接模式的联用，桥接模式总结</p>
</li>
</ul>
<hr>
<p>  组合模式-Composite Pattern【学习难度：★★★☆☆，使用频率：★★★★☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7956898">树形结构的处理——组合模式（一）</a>：设计杀毒软件的框架结构</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7956908">树形结构的处理——组合模式（二）</a>：组合模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7956931">树形结构的处理——组合模式（三）</a>：杀毒软件的框架结构的组合模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7956937">树形结构的处理——组合模式（四）</a>：透明组合模式与安全组合模式</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7956962">树形结构的处理——组合模式（五）</a>：公司组织结构，组合模式总结</p>
<hr>
<p>  装饰模式-Decorator Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7424685">扩展系统功能——装饰模式（一）</a>：图形界面构件库的设计</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7425849">扩展系统功能——装饰模式（二）</a>：装饰模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7425861">扩展系统功能——装饰模式（三）</a>：图形界面构件库的装饰模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7425873">扩展系统功能——装饰模式（四）</a>：透明装饰模式与半透明装饰模式，装饰模式注意事项，装饰模式总结</p>
<hr>
<p>  外观模式-Facade Pattern【学习难度：★☆☆☆☆，使用频率：★★★★★】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8258121">深入浅出外观模式（一）</a>：外观模式概述，外观模式结构与实现</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8259705">深入浅出外观模式（二）</a>：外观模式应用实例（文件加密模块）</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8259789">深入浅出外观模式（三）</a>：抽象外观类，外观模式效果与适用场景</p>
<hr>
<p>  享元模式-Flyweight Pattern【学习难度：★★★★☆，使用频率：★☆☆☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7667781">实现对象的复用——享元模式（一）</a>：围棋棋子的设计，享元模式概述（上）</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7667810">实现对象的复用——享元模式（二）</a>：享元模式概述（下）</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7667839">实现对象的复用——享元模式（三）</a>：围棋棋子的享元模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7667860">实现对象的复用——享元模式（四）</a>：带外部状态的围棋棋子解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7667901">实现对象的复用——享元模式（五）</a>：单纯享元模式和复合享元模式，关于享元模式的几点补充，享元模式总结</p>
<hr>
<p>  代理模式-Proxy Pattern【学习难度：★★★☆☆，使用频率：★★★★☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8227953">代理模式（一）</a>：代理模式概述，代理模式结构与实现</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8228042">代理模式（二）</a>：代理模式应用实例（收费商务信息查询系统）</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8228132">代理模式（三）</a>：远程代理，虚拟代理，缓冲代理</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8228156">代理模式（四）</a>：代理模式效果与适用场景</p>
<p>  <strong>十一个行为型模式</strong></p>
<p>  职责链模式-Chain of Responsibility Pattern【学习难度：★★★☆☆，使用频率：★★☆☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420891">请求的链式处理——职责链模式（一）</a>：采购单的分级审批</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420893">请求的链式处理——职责链模式（二）</a>：职责链模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420898">请求的链式处理——职责链模式（三）</a>：采购单分级审批的职责链模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7420902">请求的链式处理——职责链模式（四）</a>：纯与不纯的职责链模式，职责链模式总结</p>
<hr>
<p>  命令模式-Command Pattern【学习难度：★★★<strong>☆☆<strong><strong>，使用频率：</strong></strong>★★★★☆****】</strong></p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8796736">请求发送者与接收者解耦——命令模式（一）</a>：自定义功能键，命令模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8806049">请求发送者与接收者解耦——命令模式（二）</a>：自定义功能键的命令模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8806239">请求发送者与接收者解耦——命令模式（三）</a>：命令队列的实现</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8806509">请求发送者与接收者解耦——命令模式（四）</a>：撤销操作的简单实现</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8806643">请求发送者与接收者解耦——命令模式（五）</a>：请求日志</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8806677">请求发送者与接收者解耦——命令模式（六）</a>：宏命令，命令模式总结</p>
<p>  解释器模式-Interpreter Pattern【学习难度：★★★★★，使用频率：★☆☆☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7713567">自定义语言的实现——解释器模式（一）</a>：机器人控制程序</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7713578">自定义语言的实现——解释器模式（二）</a>：文法规则和抽象语法树</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7713589">自定义语言的实现——解释器模式（三）</a>：解释器模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7713593">自定义语言的实现——解释器模式（四）</a>：机器人控制程序的解释器模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7713602">自定义语言的实现——解释器模式（五）</a>：再谈Context的作用</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7713615">自定义语言的实现——解释器模式（六）</a>：解释器模式总结</p>
<hr>
<p>  迭代器模式-Iterator Pattern【学习难度：★★★☆☆，使用频率：★★★★★】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9992005">遍历聚合对象中的元素——迭代器模式（一）</a>：销售管理系统中数据的遍历</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9992243">遍历聚合对象中的元素——迭代器模式（二）</a>：迭代器模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9992679">遍历聚合对象中的元素——迭代器模式（三）</a>：销售管理系统中数据的遍历的迭代器模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9992731">遍历聚合对象中的元素——迭代器模式（四）</a>：使用内部类实现迭代器</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9992799">遍历聚合对象中的元素——迭代器模式（五）</a>：JDK内置迭代器的使用</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/9992931">遍历聚合对象中的元素——迭代器模式（六）</a>：迭代器模式总结</p>
<p>  中介者模式-Mediator Pattern【学习难度：★★★☆☆，使用频率：★★☆☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8482952">协调多个对象之间的交互——中介者模式（一）</a>：客户信息管理窗口的初始设计</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8483005">协调多个对象之间的交互——中介者模式（二）</a>：中介者模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8483031">协调多个对象之间的交互——中介者模式（三）</a>：客户信息管理窗口的中介者模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8483081">协调多个对象之间的交互——中介者模式（四）</a>：中介者与同事类的扩展</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8483151">协调多个对象之间的交互——中介者模式（五）</a>：中介者模式总结</p>
<p>  备忘录模式-Memento Pattern【学习难度：★★☆☆☆，使用频率：★★☆☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7526740">撤销功能的实现——备忘录模式（一）</a>：可悔棋的中国象棋</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7526747">撤销功能的实现——备忘录模式（二）</a>：备忘录模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7526755">撤销功能的实现——备忘录模式（三）</a>：中国象棋的备忘录模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7526756">撤销功能的实现——备忘录模式（四）</a>：实现多次撤销</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7526759">撤销功能的实现——备忘录模式（五）</a>：再谈备忘录的封装，备忘录模式总结</p>
<hr>
<p>  观察者模式-Observer Pattern【学习难度：★★★☆☆，使用频率：★★★★★】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7720232">对象间的联动——观察者模式（一）</a>：多人联机对战游戏的设计</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7720382">对象间的联动——观察者模式（二）</a>：观察者模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7720490">对象间的联动——观察者模式（三）</a>：多人联机对战游戏的观察者模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7720507">对象间的联动——观察者模式（四）</a>：JDK对观察者模式的支持</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7720522">对象间的联动——观察者模式（五）</a>：观察者模式与Java事件处理</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7720537">对象间的联动——观察者模式（六）</a>：观察者模式与MVC，观察者模式总结</p>
<p>  状态模式-State Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8522982">处理对象的多种状态及其相互转换——状态模式（一）</a>：银行系统中的账户类设计</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8523062">处理对象的多种状态及其相互转换——状态模式（二）</a>：状态模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8523083">处理对象的多种状态及其相互转换——状态模式（三）</a>：账户类的状态模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8523105">处理对象的多种状态及其相互转换——状态模式（四）</a>：共享状态的实现</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8523130">处理对象的多种状态及其相互转换——状态模式（五）</a>：使用环境类实现状态转换</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8523162">处理对象的多种状态及其相互转换——状态模式（六）</a>：状态模式总结</p>
<p>  策略模式-Strategy Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7818983">算法的封装与切换——策略模式（一）</a>：电影票打折方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7819136">算法的封装与切换——策略模式（二）</a>：策略模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7819216">算法的封装与切换——策略模式（三）</a>：电影票打折方案的策略模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7819266">算法的封装与切换——策略模式（四）</a>：策略模式的两个典型应用，策略模式总结</p>
<p>  模板方法模式-Template Method Pattern【学习难度：★★☆☆☆，使用频率：★★★☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8299794">模板方法模式深度解析（一）</a>：模板方法模式概述，模板方法模式结构与实现</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8299863">模板方法模式深度解析（二）</a>：模板方法模式应用实例（银行利息计算模块）</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8299927">模板方法模式深度解析（三）</a>：钩子方法的使用，模板方法模式效果与适用场景</p>
<p>  访问者模式-Visitor Pattern【学习难度：★★★★☆，使用频率：★☆☆☆☆】</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7433523">操作复杂对象结构——访问者模式（一）</a>：OA系统中员工数据汇总</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7433567">操作复杂对象结构——访问者模式（二）</a>：访问者模式概述</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7433576">操作复杂对象结构——访问者模式（三）</a>：OA系统中员工数据汇总的访问者模式解决方案</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7433591">操作复杂对象结构——访问者模式（四）</a>：访问者模式与组合模式联用，访问者模式总结</p>
<hr>
<p>  <strong>设计模式趣味学习（复习）</strong></p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7707380">设计模式与足球（一）</a>：创建型模式</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7707497">设计模式与足球（二）</a>：结构型模式</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7707605">设计模式与足球（三）</a>：行为型模式（上）</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/7708208">设计模式与足球（四）</a>：行为型模式（下）</p>
<hr>
<p>  设计模式综合应用实例</p>
<p>  多人联机射击游戏</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8262987">多人联机射击游戏中的设计模式应用（一）</a>：抽象工厂模式，建造者模式，工厂方法模式，迭代器模式，命令模式</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8263025">多人联机射击游戏中的设计模式应用（二）</a>：观察者模式，单例模式，状态模式，适配器模式</p>
<p>  数据库同步系统</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8671196">设计模式综合实例分析之数据库同步系统（一）</a>：数据库同步系统概述，建造者模式，简单工厂模式</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8671578">设计模式综合实例分析之数据库同步系统（二）</a>：享元模式，单例模式，观察者模式，模板方法模式</p>
<p>  <a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion/article/details/8671653">设计模式综合实例分析之数据库同步系统（三）</a>：策略模式，组合模式，命令模式，职责链模式</p>
<p>  **【作者：刘伟  **<a target="_blank" rel="noopener" href="http://blog.csdn.net/lovelion"><strong>http://blog.csdn.net/lovelion</strong></a><strong>】</strong></p>

        </div>

        
            <section class="post-copyright">
                
                    <p class="copyright-item">
                        <span>Author:</span>
                        <span>Tommas</span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>Permalink:</span>
                        <span><a href="https://m.is-local.org/post/2018022244.htm">https://m.is-local.org/post/2018022244.htm</a></span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>License:</span>
                        <span>© 2024 <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by-nc/4.0/">CC-BY-NC-4.0</a> LICENSE</span>
                    </p>
                
                

            </section>
        
        <section class="post-tags">
            <div>
                <span>Tag(s):</span>
                <span class="tag">
                    
                    
                        <a href="/tags/Java/">🏷️ Java</a>
                    
                        
                </span>
            </div>
            <div>
                <a href="javascript:window.history.back();">back</a>
                <span>· </span>
                <a href="/">home</a>
            </div>
        </section>
        <section class="post-nav">
            
                <a class="prev" rel="prev" href="/post/2018022244.htm">设计模式（Design pattern）之一</a>
            
            
            <a class="next" rel="next" href="/post/2018021844.htm">产品设计-产品架构和业务逻辑</a>
            
        </section>


    </article>
</div>

            </div>
            <footer id="footer" class="footer">
    <div class="copyright">
      <span>© 2024 Tommas</span> 
    </div>
</footer>

    </div>
</body>

</html>
