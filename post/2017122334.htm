<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
<meta name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">

    <meta name="author" content="Tommas">


    <meta name="subtitle" content="Tommas Blog">


    <meta name="description" content="Keep quiet time for time">



<title>Spring Batch 4.0.0批处理框架 | Tommas&#39;s Blog</title>



    <link rel="icon" href="/images/favicon-32x32-next.png">




    <!-- stylesheets list from _config.yml -->
    
    <link rel="stylesheet" href="/css/style.css">
    



    <!-- scripts list from _config.yml -->
    
    <script src="/js/script.js"></script>
    
    <script src="/js/tocbot.min.js"></script>
    



    
    
        
    


<meta name="generator" content="Hexo 7.3.0"></head>

<body>
    <script src="/js/jquery-2.0.3.min.js"></script>
    
<script src="/js/search.js"></script>

    <script type="text/javascript">
        var search_path = "search.xml";
        if (search_path.length == 0) {
            search_path = "search.xml";
        }
        var path = "/" + search_path;
        searchFunc(path, 'local-search-input', 'local-search-result');
        click_time=0;
    </script>
    <script>
        // this function is used to check current theme before page loaded.
        (() => {
            const currentTheme = window.localStorage && window.localStorage.getItem('theme') || '';
            const isDark = currentTheme === 'dark';
            const pagebody = document.getElementsByTagName('body')[0]
            if (isDark) {
                pagebody.classList.add('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Dark"
            } else {
                pagebody.classList.remove('dark-theme');
                // mobile
                document.getElementById("mobile-toggle-theme").innerText = "· Light"
            }
        })();
    </script>

    <div class="wrapper">
        <header>
    <nav class="navbar">
        <div class="container">
            <div class="navbar-header header-logo"><a href="/">Tommas&#39;s Blog</a></div>
            <div class="menu navbar-right">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" href="/index">Site</a>
                
                    <a class="menu-item" href="/links">Links</a>
                
                   <a class="menu-item" onclick="$('#search-page').show(); $('#local-search-input')[0].focus();">Search</a>
                <input id="switch_default" type="checkbox" class="switch_default">
                <label for="switch_default" class="toggleBtn"></label>
            </div>
        </div>
    </nav>

    
    <nav class="navbar-mobile" id="nav-mobile">
        <div class="container">
            <div class="navbar-header">
                <div>
                    <a href="/">Tommas&#39;s Blog</a><a id="mobile-toggle-theme">·&nbsp;Light</a>
                </div>
                <div class="menu-toggle" onclick="mobileBtn()">&#9776; Menu</div>
            </div>
            <div class="menu" id="mobile-menu">
                
                    <a class="menu-item" href="/archives">Posts</a>
                
                    <a class="menu-item" href="/category">Categories</a>
                
                    <a class="menu-item" href="/tag">Tags</a>
                
                    <a class="menu-item" href="/about">About</a>
                
                    <a class="menu-item" href="/index">Site</a>
                
                    <a class="menu-item" href="/links">Links</a>
                
            </div>
        </div>
    </nav>

</header>
<script>
    var mobileBtn = function f() {
        var toggleMenu = document.getElementsByClassName("menu-toggle")[0];
        var mobileMenu = document.getElementById("mobile-menu");
        if(toggleMenu.classList.contains("active")){
           toggleMenu.classList.remove("active")
            mobileMenu.classList.remove("active")
        }else{
            toggleMenu.classList.add("active")
            mobileMenu.classList.add("active")
        }
    }
</script>

            <div class="main">
        <div style="z-index: 1000; position: fixed; background-color: rgba(0, 0, 0, 0.8);
        top: 0; bottom: 0; left: 0; right: 0; padding: 0 max(50% - 375px,5px); display: none;" id="search-page"
        onclick="if (Date.now()-click_time>=10) { this.style.display='none'; } quitting=1; ">
    <input id="local-search-input" style="height: 24px; position: relative; top: 24px; font-size: 16px;
        width: calc(100% - 50px); color: white; background-color: initial; padding: 12px 23px; border-radius: 5px; border: 2px solid #bbb; outline: 0;"
        onclick="click_time=Date.now()">
    <div id="local-search-result" style="width: 100%; position: relative; top: 24px;
        height: calc(100% - 105px);" onclick="click_time=Date.now()"></div>
</div>

                <div class="container">
    
    
        <div class="post-toc">
    <div class="tocbot-list">
    </div>
    <div class="tocbot-list-menu">
        <a class="tocbot-toc-expand" onclick="expand_toc()">Expand all</a>
        <a onclick="go_top()">Back to top</a>
        <a onclick="go_bottom()">Go to bottom</a>
    </div>
</div>

<script>
    var tocbot_timer;
    var DEPTH_MAX = 6; // 为 6 时展开所有
    var tocbot_default_config = {
        tocSelector: '.tocbot-list',
        contentSelector: '.post-content',
        headingSelector: 'h1, h2, h3, h4, h5',
        orderedList: false,
        scrollSmooth: true,
        onClick: extend_click,
    };

    function extend_click() {
        clearTimeout(tocbot_timer);
        tocbot_timer = setTimeout(function() {
            tocbot.refresh(obj_merge(tocbot_default_config, {
                hasInnerContainers: true
            }));
        }, 420); // 这个值是由 tocbot 源码里定义的 scrollSmoothDuration 得来的
    }

    document.ready(function() {
        tocbot.init(obj_merge(tocbot_default_config, {
            collapseDepth: 1
        }));
    });

    function expand_toc() {
        var b = document.querySelector('.tocbot-toc-expand');
        var expanded = b.getAttribute('data-expanded');
        expanded ? b.removeAttribute('data-expanded') : b.setAttribute('data-expanded', true);
        tocbot.refresh(obj_merge(tocbot_default_config, {
            collapseDepth: expanded ? 1 : DEPTH_MAX
        }));
        b.innerText = expanded ? 'Expand all' : 'Collapse all';
    }

    function go_top() {
        window.scrollTo(0, 0);
    }

    function go_bottom() {
        window.scrollTo(0, document.body.scrollHeight);
    }

    function obj_merge(target, source) {
        for (var item in source) {
            if (source.hasOwnProperty(item)) {
                target[item] = source[item];
            }
        }
        return target;
    }
</script>
    

    
    <article class="post-wrap">
        <header class="post-header">
            <h1 class="post-title">Spring Batch 4.0.0批处理框架</h1>
            
                <div class="post-meta">
                    
                        Author: <a itemprop="author" rel="author" href="/">Tommas</a>
                    

                    
                        <span class="post-time">
                        Date: <a href="#">December 4, 2017&nbsp;&nbsp;23:34:36</a>
                        </span>
                    
                    
                        <span class="post-category">
                    Category:
                            
                                <a href="/categories/Spring/">Spring</a>
                            
                        </span>
                    
                </div>
            
        </header>

        <div class="post-content">
            <p><img src="https://s2.loli.net/2023/04/16/NTCMOsQVKqJL8ur.jpg"></p>
<p>Spring Batch 4.0.0  已发布，Spring Batch 是一个轻量级的，完全面向 Spring 的批处理框架，可以应用于企业级大量的数据处理系统。Spring Batch 以 POJO 和  Spring 框架为基础，使开发者更容易的访问和利用企业级服务。Spring Batch 可以提供大量的，可重复的数据处理功能，包括日志记录&#x2F;跟踪，事务管理，作业处理统计工作重新启动、跳过，和资源管理等重要功能。</p>
<span id="more"></span>
<p>Spring Batch 4.0 是自2014年 3.0 发布以来的又一个主要版本。3.0 发布至今，Spring 生态系统发生了很大变化，4.0 版本旨在让 Spring Batch 更新这些变化。</p>
<p>New Baseline</p>
<p>Spring Batch 3 基于 Spring Framework 4 ，Spring Batch 4 重新审视了它的依赖关系树，将它与即将到来的 Spring Boot 2 依赖关系树进行了更新，包括将 Spring Framework 5 和 Java 8 作为基线要求。</p>
<h3 id="改进的-Java-配置"><a href="#改进的-Java-配置" class="headerlink" title="改进的 Java 配置"></a>改进的 Java 配置</h3><p>如前所述，Spring Batch 4 是 Spring Boot 发布以来的第一个主要版本。在这个版本中，改善了让用户的 Java 配置体验。所有 ItemReader 和 ItemWriter 实现现在都可以使用构建器。使用 Spring Batch 3 的 Java 配置功能，将需要如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FlatFileItemReader&lt;Foo&gt; <span class="title function_">reader</span><span class="params">(Resource resource)</span> </span><br><span class="line">    <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        FlatFileItemReader&lt;Foo&gt; reader = <span class="keyword">new</span> <span class="title class_">FlatFileItemReader</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        reader.setName(“fooReader”);</span><br><span class="line">        reader.setResource(resource);</span><br><span class="line"></span><br><span class="line">        BeanWrapperFieldSetMapper&lt;Foo&gt; fieldSetMapper = </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BeanWrapperFieldSetMapper</span>&lt;&gt;();</span><br><span class="line">        fieldSetMapper.setTargetType(Foo.class);</span><br><span class="line">        fieldSetMapper.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="type">DelimitedLineTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelimitedLineTokenizer</span>();</span><br><span class="line">        tokenizer.setNames(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;“first”, “second”, “third”&#125;);</span><br><span class="line">        tokenizer.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultLineMapper</span> <span class="variable">lineMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultLineMapper</span>();</span><br><span class="line">        lineMapper.setLineTokenizer(tokenizer);</span><br><span class="line">        lineMapper.setFieldSetMapper(fieldSetMapper);</span><br><span class="line"></span><br><span class="line">        reader.setLineMapper(lineMapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>使用 Spring Batch 4，配置简化如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FlatFileItemReader&lt;Foo&gt; <span class="title function_">reader</span><span class="params">(Resource resource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FlatFileItemReaderBuilder</span>&lt;Foo&gt;()</span><br><span class="line">            .name(“fooReader”)</span><br><span class="line">            .resource(resource)</span><br><span class="line">            .delimited()</span><br><span class="line">            .names(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;“first”, “second”, “third”&#125;)</span><br><span class="line">            .targetType(Foo.class)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建批处理服务"><a href="#创建批处理服务" class="headerlink" title="创建批处理服务"></a>创建批处理服务</h3><pre><code>本指南将引导您完成创建基本批处理驱动解决方案的过程。
</code></pre>
<h3 id="你要建什么"><a href="#你要建什么" class="headerlink" title="你要建什么"></a>你要建什么</h3><pre><code>您将构建一个服务，该服务从CSV电子表格中导入数据，用自定义代码对其进行转换，并将最终结果存储在数据库中。
</code></pre>
<h3 id="你需要什么"><a href="#你需要什么" class="headerlink" title="你需要什么"></a>你需要什么</h3><pre><code>大约15分钟
</code></pre>
<h3 id="最喜欢的文本编辑器或IDE"><a href="#最喜欢的文本编辑器或IDE" class="headerlink" title="最喜欢的文本编辑器或IDE"></a>最喜欢的文本编辑器或IDE</h3><pre><code>JDK 1.8或以后

Gradle 2.3或Maven 3.0+

您还可以直接将代码导入IDE中：

Spring Tool Suite (STS)

IntelliJ IDEA
</code></pre>
<h3 id="如何完成本指南"><a href="#如何完成本指南" class="headerlink" title="如何完成本指南"></a>如何完成本指南</h3><pre><code>像大多数Spring一样入门指南，您可以从头开始并完成每个步骤，也可以绕过您已经熟悉的基本设置步骤。无论哪种方式，你最终都会得到工作代码。
</code></pre>
<p>到白手兴家，继续前进用Gradle建造…</p>
<p>到跳过基础，做以下工作：</p>
<p>下载并解压缩本指南的源存储库，或用Git:</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/spring-guides/gs-batch-processing.git</span><br></pre></td></tr></table></figure>
<p>cd into gs-batch-processing&#x2F;initial</p>
<p>跳到创建一个business类…</p>
<p>当你完成中的代码检查结果，gs-batch-processing&#x2F;complete.</p>
<h3 id="用Gradle创建"><a href="#用Gradle创建" class="headerlink" title="用Gradle创建"></a>用Gradle创建</h3><p>首先，您设置了一个基本的构建脚本。在使用Spring构建应用程序时，您可以使用任何您喜欢的构建系统，但是您需要使用的代码用Gradle和Maven包括在这里。如果您对这两种情况都不熟悉，请参阅用Gradle构建Java项目或使用Maven构建Java项目…</p>
<h4 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h4><p>在您选择的项目目录中，创建以下子目录结构；例如，使用mkdir-p src&#x2F;main&#x2F;java&#x2F;hello关于*nix系统：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└── <span class="attribute">src</span></span><br><span class="line">    └── <span class="selector-tag">main</span></span><br><span class="line">        └── java</span><br><span class="line">            └── hello</span><br></pre></td></tr></table></figure>
<p>创建一个Gradle构建文件<br>下面是initial Gradle build file….</p>
<p><strong>build.gradle</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript&#123;repositories&#123;mavenCentral()</span><br><span class="line">    &#125;dependencies&#123;classpath(<span class="string">&quot;org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;apply plugin: <span class="string">&#x27;java&#x27;</span>apply plugin: <span class="string">&#x27;eclipse&#x27;</span>apply plugin: <span class="string">&#x27;idea&#x27;</span>apply plugin: <span class="string">&#x27;org.springframework.boot&#x27;</span>jar&#123;baseName= <span class="string">&#x27;gs-batch-processing&#x27;</span>version=  <span class="string">&#x27;0.1.0&#x27;</span></span><br><span class="line">&#125;repositories&#123;mavenCentral()</span><br><span class="line">&#125;sourceCompatibility= <span class="number">1.</span>8targetCompatibility= <span class="number">1.</span>8dependencies&#123;compile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-batch&quot;</span>)compile(<span class="string">&quot;org.hsqldb:hsqldb&quot;</span>)testCompile(<span class="string">&quot;junit:junit&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Spring-Boot-gradle-plugin提供了许多方便的功能："><a href="#Spring-Boot-gradle-plugin提供了许多方便的功能：" class="headerlink" title="Spring Boot gradle plugin提供了许多方便的功能："></a>Spring Boot gradle plugin提供了许多方便的功能：</h4><ul>
<li>它收集类路径上的所有JAR，并构建一个可运行的“über-jar”，这使得执行和传输服务更加方便。</li>
<li>它搜索public static void main()方法标记为可运行的类。</li>
<li>它提供了一个内置的依赖项解析器，它将版本号设置为匹配。Spring Boot dependencies您可以覆盖任何版本，但它将默认为Boot所选的一组版本。</li>
</ul>
<h2 id="用Maven构建"><a href="#用Maven构建" class="headerlink" title="用Maven构建"></a>用Maven构建</h2><p>首先，您设置了一个基本的构建脚本。在使用Spring构建应用程序时，您可以使用任何您喜欢的构建系统，但是您需要使用的代码马文包括在这里。如果您不熟悉Maven，请参阅使用Maven构建Java项目…</p>
<p>创建目录结构<br>在您选择的项目目录中，创建以下子目录结构；例如，使用mkdir-p src&#x2F;main&#x2F;java&#x2F;hello关于*nix系统：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└── <span class="attribute">src</span></span><br><span class="line">    └── <span class="selector-tag">main</span></span><br><span class="line">        └── java</span><br><span class="line">            └── hello</span><br></pre></td></tr></table></figure>
<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-batch-processing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-batch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="大Spring-Boot-Maven插件提供了许多方便的功能："><a href="#大Spring-Boot-Maven插件提供了许多方便的功能：" class="headerlink" title="大Spring Boot Maven插件提供了许多方便的功能："></a>大Spring Boot Maven插件提供了许多方便的功能：</h4><ul>
<li><p>它收集类路径上的所有JAR，并构建一个可运行的“über-jar”，这使得执行和传输服务更加方便。</p>
</li>
<li><p>它搜索public static void main()方法标记为可运行的类。</p>
</li>
<li><p>它提供了一个内置的依赖项解析器，它将版本号设置为匹配。Spring Boot dependencies您可以覆盖任何版本，但它将默认为Boot所选的一组版本。</p>
</li>
</ul>
<h2 id="用IDE构建"><a href="#用IDE构建" class="headerlink" title="用IDE构建"></a>用IDE构建</h2><p>阅读如何将本指南直接导入Spring Tool Suite…</p>
<p>阅读如何使用本指南IntelliJ IDEA…</p>
<h3 id="业务数据"><a href="#业务数据" class="headerlink" title="业务数据"></a>业务数据</h3><p>通常，您的客户或业务分析师提供电子表格。在这种情况下，你自己编出来的。</p>
<p><strong>SRC&#x2F;Main&#x2F;Resources&#x2F;Sample-data.csv</strong></p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Jill,</span>Doe</span><br><span class="line"><span class="built_in">Joe,</span>Doe</span><br><span class="line"><span class="built_in">Justin,</span>Doe</span><br><span class="line"><span class="built_in">Jane,</span>Doe</span><br><span class="line"><span class="built_in">John,</span>Doe</span><br></pre></td></tr></table></figure>
<p>此电子表格包含每行的名称和姓氏，以逗号分隔。正如您所看到的，这是Spring处理的一个非常常见的模式。</p>
<p>接下来，编写一个SQL脚本来创建一个表来存储数据。</p>
<p><strong>SRC&#x2F;main&#x2F;resources&#x2F;schema-all.sql</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> people IF <span class="keyword">EXISTS</span>;<span class="keyword">CREATE TABLE</span> people(person_id <span class="type">BIGINT</span> <span class="keyword">IDENTITY</span> <span class="keyword">NOT NULL</span> <span class="keyword">PRIMARY KEY</span>,first_name <span class="type">VARCHAR</span>(<span class="number">20</span>),last_name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<pre><code>Spring Boot模式schema-@@platform@@.sql启动时自动。-all是所有平台的默认设置。
</code></pre>
<h3 id="创建一个business类"><a href="#创建一个business类" class="headerlink" title="创建一个business类"></a>创建一个business类</h3><p>现在您已经看到了数据输入和输出的格式，您可以编写代码来表示一行数据.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">packagehello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StringlastName;</span><br><span class="line">    <span class="keyword">private</span> StringfirstName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(StringfirstName, StringlastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.firstName=firstName;</span><br><span class="line">        <span class="built_in">this</span>.lastName=lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">voidsetFirstName</span><span class="params">(StringfirstName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.firstName=firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringgetFirstName</span><span class="params">()</span> &#123;</span><br><span class="line">        returnfirstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringgetLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        returnlastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">voidsetLastName</span><span class="params">(StringlastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastName=lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringtoString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;firstName: &quot;</span> +firstName+ <span class="string">&quot;, lastName: &quot;</span> +lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您可以实例化person通过构造函数，或通过设置属性，使用姓和名初始化。</p>
<h3 id="创建中间处理器（-intermediate-processor）"><a href="#创建中间处理器（-intermediate-processor）" class="headerlink" title="创建中间处理器（ intermediate processor）"></a>创建中间处理器（ intermediate processor）</h3><p>批处理中的一个常见范例是摄取数据，转换数据，然后将其输送到其他地方。在这里，您将编写一个简单的转换器，将名称转换为大写。</p>
<p><strong>SRC&#x2F;main&#x2F;java&#x2F;hello&#x2F;PersonItemProcessor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">packagehello;</span><br><span class="line"></span><br><span class="line">importorg.slf4j.Logger;</span><br><span class="line">importorg.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">importorg.springframework.batch.item.ItemProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonItemProcessor</span> <span class="keyword">implements</span> <span class="title class_">ItemProcessor</span>&lt;Person, Person&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Loggerlog= LoggerFactory.getLogger(PersonItemProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Personprocess</span><span class="params">(<span class="keyword">final</span> Personperson)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> StringfirstName=person.getFirstName().toUpperCase();</span><br><span class="line">        <span class="keyword">final</span> StringlastName=person.getLastName().toUpperCase();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PersontransformedPerson= <span class="keyword">new</span> <span class="title class_">Person</span>(firstName,lastName);log.info(<span class="string">&quot;Converting (&quot;</span> +person+ <span class="string">&quot;) into (&quot;</span> +transformedPerson+ <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        returntransformedPerson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PersonItemProcessor器实现Spring批处理ItemProcessor接口。这使代码很容易连接到一个批处理作业中，您可以在本指南中进一步对其进行定义。根据接口，您将收到一个传入的person对象，然后将其转换upper-cased Person.</p>
<pre><code>不需要输入和输出类型相同。事实上，在读取一个数据源之后，有时应用程序的数据流需要不同的数据类型。
</code></pre>
<h3 id="把一批工作放在一起"><a href="#把一批工作放在一起" class="headerlink" title="把一批工作放在一起"></a>把一批工作放在一起</h3><p>现在，您将实际的批处理作业组合在一起。SpringBatch提供了许多实用程序类，这些类减少了编写自定义代码的需要。相反，您可以专注于业务逻辑。</p>
<p><strong>SRC&#x2F;main&#x2F;java&#x2F;hello&#x2F;BatchConfiguration.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">packagehello;</span><br><span class="line"></span><br><span class="line">importjavax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">importorg.springframework.batch.core.Job;</span><br><span class="line">importorg.springframework.batch.core.JobExecutionListener;</span><br><span class="line">importorg.springframework.batch.core.Step;</span><br><span class="line">importorg.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line">importorg.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line">importorg.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line">importorg.springframework.batch.core.launch.support.RunIdIncrementer;</span><br><span class="line">importorg.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;</span><br><span class="line">importorg.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line">importorg.springframework.batch.item.file.FlatFileItemReader;</span><br><span class="line">importorg.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;</span><br><span class="line">importorg.springframework.batch.item.file.mapping.DefaultLineMapper;</span><br><span class="line">importorg.springframework.batch.item.file.transform.DelimitedLineTokenizer;</span><br><span class="line">importorg.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">importorg.springframework.context.annotation.Bean;</span><br><span class="line">importorg.springframework.context.annotation.Configuration;</span><br><span class="line">importorg.springframework.core.io.ClassPathResource;</span><br><span class="line">importorg.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> JobBuilderFactoryjobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactorystepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> DataSourcedataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tag::readerwriterprocessor[]</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FlatFileItemReader&lt;Person&gt;reader() &#123;</span><br><span class="line">        FlatFileItemReader&lt;Person&gt;reader= <span class="keyword">new</span> <span class="title class_">FlatFileItemReader</span>&lt;Person&gt;();reader.setResource(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;sample-data.csv&quot;</span>));reader.setLineMapper(<span class="keyword">new</span> <span class="title class_">DefaultLineMapper</span>&lt;Person&gt;() &#123;&#123;setLineTokenizer(<span class="keyword">new</span> <span class="title class_">DelimitedLineTokenizer</span>() &#123;&#123;setNames(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;lastName&quot;</span> &#125;);</span><br><span class="line">            &#125;&#125;);setFieldSetMapper(<span class="keyword">new</span> <span class="title class_">BeanWrapperFieldSetMapper</span>&lt;Person&gt;() &#123;&#123;setTargetType(Person.class);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">        returnreader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PersonItemProcessorprocessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PersonItemProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcBatchItemWriter&lt;Person&gt;writer() &#123;</span><br><span class="line">        JdbcBatchItemWriter&lt;Person&gt;writer= <span class="keyword">new</span> <span class="title class_">JdbcBatchItemWriter</span>&lt;Person&gt;();writer.setItemSqlParameterSourceProvider(<span class="keyword">new</span> <span class="title class_">BeanPropertyItemSqlParameterSourceProvider</span>&lt;Person&gt;());writer.setSql(<span class="string">&quot;INSERT INTO people (first_name, last_name) VALUES (:firstName, :lastName)&quot;</span>);writer.setDataSource(dataSource);</span><br><span class="line">        returnwriter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end::readerwriterprocessor[]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// tag::jobstep[]</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JobimportUserJob</span><span class="params">(JobCompletionNotificationListenerlistener)</span> &#123;</span><br><span class="line">        returnjobBuilderFactory.get(<span class="string">&quot;importUserJob&quot;</span>)</span><br><span class="line">                .incrementer(<span class="keyword">new</span> <span class="title class_">RunIdIncrementer</span>())</span><br><span class="line">                .listener(listener)</span><br><span class="line">                .flow(step1())</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stepstep1</span><span class="params">()</span> &#123;</span><br><span class="line">        returnstepBuilderFactory.get(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">                .&lt;Person, Person&gt;chunk(<span class="number">10</span>)</span><br><span class="line">                .reader(reader())</span><br><span class="line">                .processor(processor())</span><br><span class="line">                .writer(writer())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end::jobstep[]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  首先，@EnableBatchProcessing注释添加了许多支持作业的关键bean，并为您节省了大量的腿工作。此示例使用基于内存的数据库(由@EnableBatchProcessing)，这意味着当它完成时，数据就会消失。</p>
<p>把它分解：</p>
<p><strong>SRC&#x2F;main&#x2F;java&#x2F;hello&#x2F;BatchConfiguration.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FlatFileItemReader&lt;Person&gt;reader() &#123;</span><br><span class="line">    FlatFileItemReader&lt;Person&gt;reader= <span class="keyword">new</span> <span class="title class_">FlatFileItemReader</span>&lt;Person&gt;();reader.setResource(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;sample-data.csv&quot;</span>));reader.setLineMapper(<span class="keyword">new</span> <span class="title class_">DefaultLineMapper</span>&lt;Person&gt;() &#123;&#123;setLineTokenizer(<span class="keyword">new</span> <span class="title class_">DelimitedLineTokenizer</span>() &#123;&#123;setNames(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;lastName&quot;</span> &#125;);</span><br><span class="line">        &#125;&#125;);setFieldSetMapper(<span class="keyword">new</span> <span class="title class_">BeanWrapperFieldSetMapper</span>&lt;Person&gt;() &#123;&#123;setTargetType(Person.class);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    returnreader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PersonItemProcessorprocessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PersonItemProcessor</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Person&gt;writer() &#123;</span><br><span class="line">    JdbcBatchItemWriter&lt;Person&gt;writer= <span class="keyword">new</span> <span class="title class_">JdbcBatchItemWriter</span>&lt;Person&gt;();writer.setItemSqlParameterSourceProvider(<span class="keyword">new</span> <span class="title class_">BeanPropertyItemSqlParameterSourceProvider</span>&lt;Person&gt;());writer.setSql(<span class="string">&quot;INSERT INTO people (first_name, last_name) VALUES (:firstName, :lastName)&quot;</span>);writer.setDataSource(dataSource);</span><br><span class="line">    returnwriter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个代码块定义输入、处理器和输出。—reader()创建ItemReader.它查找一个名为sample-data.csv并使用足够的信息解析每一行项，从而将其转换为person…processor()创建我们的PersonItemProcessor您在前面定义，目的是大写数据。—write(DataSource)创建ItemWriter。此对象针对JDBC目标，并自动获取由@EnableBatchProcessing它包括插入单个person由Javabean属性驱动。</p>
<p>下一部分重点关注实际的作业配置。<br><strong>SRC&#x2F;main&#x2F;java&#x2F;hello&#x2F;BatchConfiguration.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JobimportUserJob</span><span class="params">(JobCompletionNotificationListenerlistener)</span> &#123;</span><br><span class="line">    returnjobBuilderFactory.get(<span class="string">&quot;importUserJob&quot;</span>)</span><br><span class="line">            .incrementer(<span class="keyword">new</span> <span class="title class_">RunIdIncrementer</span>())</span><br><span class="line">            .listener(listener)</span><br><span class="line">            .flow(step1())</span><br><span class="line">            .end()</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Stepstep1</span><span class="params">()</span> &#123;</span><br><span class="line">    returnstepBuilderFactory.get(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">            .&lt;Person, Person&gt;chunk(<span class="number">10</span>)</span><br><span class="line">            .reader(reader())</span><br><span class="line">            .processor(processor())</span><br><span class="line">            .writer(writer())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个方法定义作业，三定义一个步骤。作业是由步骤构建的，每个步骤都可以包含一个阅读器、一个处理器和一个编写器。</p>
<p>在此作业定义中，您需要一个增量器，因为作业使用数据库来维护执行状态。然后列出每个步骤，其中此作业只有一个步骤。作业结束，JavaAPI生成一个配置完美的作业。</p>
<p>在步骤定义中，定义一次写入多少数据。在这种情况下，它一次最多写十条记录。接下来，使用前面注入的位来配置读取器、处理器和写入器。</p>
<pre><code>chunk()是前缀&lt;Person,Person&gt;因为这是一个通用的方法。这表示处理的每个“块”的输入和输出类型，并与ItemReader和ItemWriter...
</code></pre>
<p><strong>SRC&#x2F;main&#x2F;java&#x2F;hello&#x2F;JobCompletionNotificationListener.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">packagehello;</span><br><span class="line"></span><br><span class="line">importjava.sql.ResultSet;</span><br><span class="line">importjava.sql.SQLException;</span><br><span class="line">importjava.util.List;</span><br><span class="line"></span><br><span class="line">importorg.slf4j.Logger;</span><br><span class="line">importorg.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">importorg.springframework.batch.core.BatchStatus;</span><br><span class="line">importorg.springframework.batch.core.JobExecution;</span><br><span class="line">importorg.springframework.batch.core.listener.JobExecutionListenerSupport;</span><br><span class="line">importorg.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">importorg.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">importorg.springframework.jdbc.core.RowMapper;</span><br><span class="line">importorg.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobCompletionNotificationListener</span> <span class="keyword">extends</span> <span class="title class_">JobExecutionListenerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Loggerlog= LoggerFactory.getLogger(JobCompletionNotificationListener.class);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplatejdbcTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">JobCompletionNotificationListener</span><span class="params">(JdbcTemplatejdbcTemplate)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.jdbcTemplate=jdbcTemplate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">voidafterJob</span><span class="params">(JobExecutionjobExecution)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(jobExecution.getStatus() == BatchStatus.COMPLETED) &#123;log.info(<span class="string">&quot;!!! JOB FINISHED! Time to verify the results&quot;</span>);</span><br><span class="line"></span><br><span class="line">			List&lt;Person&gt;results=jdbcTemplate.query(<span class="string">&quot;SELECT first_name, last_name FROM people&quot;</span>, <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;Person&gt;() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="keyword">public</span> <span class="title function_">PersonmapRow</span><span class="params">(ResultSetrs, introw)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(rs.getString(<span class="number">1</span>),rs.getString(<span class="number">2</span>));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (Personperson:results) &#123;log.info(<span class="string">&quot;Found &lt;&quot;</span> +person+ <span class="string">&quot;&gt; in the database.&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此代码监听作业为BatchStatus.COMPLETED，然后使用JdbcTemplate检查结果。</p>
<h3 id="使应用程序可执行"><a href="#使应用程序可执行" class="headerlink" title="使应用程序可执行"></a>使应用程序可执行</h3><p>虽然批处理可以嵌入到Web应用程序和WAR文件中，但下面演示的更简单的方法创建了一个独立的应用程序。您将所有东西打包到一个可执行的JAR文件中，该文件由一个好的旧Java驱动。main()方法。</p>
<p><strong>src&#x2F;main&#x2F;java&#x2F;hello&#x2F;Application.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">packagehello;</span><br><span class="line"></span><br><span class="line">importorg.springframework.boot.SpringApplication;</span><br><span class="line">importorg.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">voidmain</span><span class="params">(String[]args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@SpringBootApplication是一个方便的注释，它添加了以下所有内容：</p>
<ul>
<li>@Configuration将类标记为应用程序上下文的bean定义的源。</li>
<li>@EnableAutoConfiguration告诉SpringBoot根据类路径设置、其他bean和各种属性设置开始添加bean。</li>
<li>通常你会添加@EnableWebMvc对于SpringMVC应用程序，但是SpringBoot在看到Springwebmvc在类路径上。这会将应用程序标记为web应用程序，并激活关键行为，例如设置DispatcherServlet…</li>
<li>@ComponentScan告诉Spring在hello包，让它找到控制器。</li>
</ul>
<p>main()方法使用SpringBoot的SpringApplication.run()方法来启动应用程序。您注意到没有一行XML吗？不web.xml也要归档。这个Web应用程序是100%纯Java，您不必处理配置任何管道或基础设施的问题。</p>
<p>出于演示目的，有一些代码可以创建一个JdbcTemplate，查询数据库，并打印批处理作业插入的人员的名称。</p>
<p>构建一个可执行的JAR<br>您可以使用Gradle或Maven从命令行运行应用程序。或者，您可以构建一个包含所有必需的依赖项、类和资源的单个可执行JAR文件，并运行该文件。这使得在整个开发生命周期、跨不同环境等将服务作为应用程序进行发布、版本和部署变得非常容易。</p>
<h5 id="如果使用Gradle"><a href="#如果使用Gradle" class="headerlink" title="如果使用Gradle"></a>如果使用Gradle</h5><p>则可以使用.&#x2F;gradlew bootRun.或者您可以使用以下方法构建JAR文件.&#x2F;gradlew build然后可以运行JAR文件：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar build/libs/gs-batch-processing-<span class="number">0</span>.<span class="number">1</span>.<span class="number">0</span>.jar</span><br></pre></td></tr></table></figure>
<h5 id="如果您使用的是Maven"><a href="#如果您使用的是Maven" class="headerlink" title="如果您使用的是Maven"></a>如果您使用的是Maven</h5><p>则可以使用.&#x2F;mvnw Spring-boot：运行.或者您可以用.&#x2F;mvnw clean package然后可以运行JAR文件：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar target/gs-batch-processing-<span class="number">0</span>.<span class="number">1</span>.<span class="number">0</span>.jar</span><br></pre></td></tr></table></figure>
<pre><code>上面的过程将创建一个可运行的JAR。你也可以选择构建一个经典的WAR文件相反。
</code></pre>
<p>该职务为每个被转换的人打印一行。作业运行后，还可以看到查询数据库的输出。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Converting (firstName: Jill, lastName: Doe) into (firstName: JILL, lastName: DOE)</span><br><span class="line">Converting (firstName: Joe, lastName: Doe) into (firstName: JOE, lastName: DOE)</span><br><span class="line">Converting (firstName: Justin, lastName: Doe) into (firstName: JUSTIN, lastName: DOE)</span><br><span class="line">Converting (firstName: Jane, lastName: Doe) into (firstName: JANE, lastName: DOE)</span><br><span class="line">Converting (firstName: John, lastName: Doe) into (firstName: JOHN, lastName: DOE)</span><br><span class="line">Found  in the database.</span><br><span class="line">Found  in the database.</span><br><span class="line">Found  in the database.</span><br><span class="line">Found  in the database.</span><br><span class="line">Found  in the database.</span><br></pre></td></tr></table></figure>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>恭喜你！您构建了一个批处理作业，该作业从电子表格中摄取数据，并对其进行处理，并将其写入数据库。</p>
<p>See also</p>
<ul>
<li><p>The following guides may also be helpful:</p>
</li>
<li><p>Building an Application with Spring Boot</p>
</li>
<li><p>Accessing Data with GemFire</p>
</li>
<li><p>Accessing Data with JPA</p>
</li>
<li><p>Accessing Data with MongoDB</p>
</li>
<li><p>Accessing data with MySQL</p>
</li>
</ul>

        </div>

        
            <section class="post-copyright">
                
                    <p class="copyright-item">
                        <span>Author:</span>
                        <span>Tommas</span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>Permalink:</span>
                        <span><a href="https://m.is-local.org/post/2017122334.htm">https://m.is-local.org/post/2017122334.htm</a></span>
                    </p>
                
                
                    <p class="copyright-item">
                        <span>License:</span>
                        <span>© 2025 <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by-nc/4.0/">CC-BY-NC-4.0</a> LICENSE</span>
                    </p>
                
                

            </section>
        
        <section class="post-tags">
            <div>
                <span>Tag(s):</span>
                <span class="tag">
                    
                    
                        <a href="/tags/Spring-Batch/">🏷️ Spring Batch</a>
                    
                        
                </span>
            </div>
            <div>
                <a href="javascript:window.history.back();">back</a>
                <span>· </span>
                <a href="/">home</a>
            </div>
        </section>
        <section class="post-nav">
            
                <a class="prev" rel="prev" href="/post/2017121254.htm">三目运算详解</a>
            
            
            <a class="next" rel="next" href="/post/2017121234.htm">YAML脚本学习笔记</a>
            
        </section>


    </article>
</div>

            </div>
            <footer id="footer" class="footer">
    <div class="copyright">
      <span>© 2025 Tommas</span> 
    </div>
</footer>

    </div>
</body>

</html>
